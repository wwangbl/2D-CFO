library(magrittr)
library(BOIN)



# posterior probability of pj >= phi given data
post.prob.fn <- function(phi, y, n, alp.prior=0.1, bet.prior=0.1){
  alp <- alp.prior + y 
  bet <- bet.prior + n - y
  1 - pbeta(phi, alp, bet)
}


prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
  alp1 <- alp.prior + y1
  alp2 <- alp.prior + y2
  bet1 <- alp.prior + n1 - y1
  bet2 <- alp.prior + n2 - y2
  fn.min <- function(x){
    dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
  }
  fn.max <- function(x){
    pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
  }
  const.min <- integrate(fn.min, lower=0, upper=1)$value
  const.max <- integrate(fn.max, lower=0, upper=1)$value
  p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
  p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
  
  list(p1=p1, p2=p2)
}


OR.values <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior, type){
  ps <- prob.int(phi, y1, n1, y2, n2, alp.prior, bet.prior)
  if (type=="L"){
    pC <- 1 - ps$p2
    pL <- 1 - ps$p1
    oddsC <- pC/(1-pC)
    oddsL <- pL/(1-pL)
    OR <- oddsC*oddsL
  }else if (type=="R"){
    pC <- 1 - ps$p1
    pR <- 1 - ps$p2
    oddsC <- pC/(1-pC)
    oddsR <- pR/(1-pR)
    OR <- (1/oddsC)/oddsR
  }else if (type=="D"){
    pC <- 1 - ps$p2
    pD <- 1 - ps$p1
    oddsC <- pC/(1-pC)
    oddsD <- pD/(1-pD)
    OR <- oddsC*oddsD
  }else if (type=="U"){
    pC <- 1 - ps$p1
    pU <- 1 - ps$p2
    oddsC <- pC/(1-pC)
    oddsU <- pU/(1-pU)
    OR <- (1/oddsC)/oddsU
  }
  return(OR)
}

All.OR.table <- function(phi, n1, n2, type, alp.prior, bet.prior){
  ret.mat <- matrix(rep(0, (n1+1)*(n2+1)), nrow=n1+1)
  for (y1cur in 0:n1){
    for (y2cur in 0:n2){
      ret.mat[y1cur+1, y2cur+1] <- OR.values(phi, y1cur, n1, y2cur, n2, alp.prior, bet.prior, type)
    }
  }
  ret.mat
}

# compute the marginal prob when lower < phiL/phiC/phiR < upper
# i.e., Pr(Y=y|lower<phi<upper)
margin.phi <- function(y, n, lower, upper){
  C <- 1/(upper-lower)
  fn <- function(phi) {
    dbinom(y, n, phi)*C
  }
  integrate(fn, lower=lower, upper=upper)$value
}

# Obtain the table of marginal distribution of (y1, y2)
# after intergrate out (phi1, phi2)
# under H0 and H1
# H0: phi1=phi, phi < phi2 < 2phi
# H1: phi2=phi, 0   < phi1 < phi
margin.ys.table <- function(n1, n2, phi, hyperthesis){
  if (hyperthesis=="H0"){
    p.y1s <- dbinom(0:n1, n1, phi)
    p.y2s <- sapply(0:n2, margin.phi, n=n2, lower=phi, upper=2*phi)
  }else if (hyperthesis=="H1"){
    p.y1s <- sapply(0:n1, margin.phi, n=n1, lower=0, upper=phi)
    p.y2s <- dbinom(0:n2, n2, phi)
  }
  p.y1s.mat <- matrix(rep(p.y1s, n2+1), nrow=n1+1)
  p.y2s.mat <- matrix(rep(p.y2s, n1+1), nrow=n1+1, byrow=TRUE)
  margin.ys <- p.y1s.mat * p.y2s.mat
  margin.ys
}

# Obtain the optimal gamma for the hypothesis test
optim.gamma.fn <- function(n1, n2, phi, type, alp.prior, bet.prior){
  OR.table <- All.OR.table(phi, n1, n2, type, alp.prior, bet.prior) 
  ys.table.H0 <- margin.ys.table(n1, n2, phi, "H0")
  ys.table.H1 <- margin.ys.table(n1, n2, phi, "H1")
  
  argidx <- order(OR.table)
  sort.OR.table <- OR.table[argidx]
  sort.ys.table.H0 <- ys.table.H0[argidx]
  sort.ys.table.H1 <- ys.table.H1[argidx]
  n.tol <- length(sort.OR.table)
  
  if (type=="L"){
    errs <- rep(0, n.tol-1)
    for (i in 1:(n.tol-1)){
      err1 <- sum(sort.ys.table.H0[1:i])
      err2 <- sum(sort.ys.table.H1[(i+1):n.tol])
      err <- err1 + err2
      errs[i] <- err
    }
    min.err <- min(errs)
    if (min.err > 1){
      gam <- 0
      min.err <- 1
    }else {
      minidx <- which.min(errs)
      gam <- sort.OR.table[minidx]
    }
  }else if (type=='R'){
    errs <- rep(0, n.tol-1)
    for (i in 1:(n.tol-1)){
      err1 <- sum(sort.ys.table.H1[1:i])
      err2 <- sum(sort.ys.table.H0[(i+1):n.tol])
      err <- err1 + err2
      errs[i] <- err
    }
    min.err <- min(errs)
    if (min.err > 1){
      gam <- 0
      min.err <- 1
    }else {
      minidx <- which.min(errs)
      gam <- sort.OR.table[minidx]
    }
    
  }
  list(gamma=gam, min.err=min.err)
}

make.decision.1dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
  if (cover.doses[2] == 1){
    return(1)
  }else{
    if (is.na(cys[1]) & (cover.doses[3]==1)){
      return(2)
    }else  if (is.na(cys[1]) & (!(cover.doses[3]==1))){
      gam2 <- optim.gamma.fn(cns[2], cns[3], phi, "R", alp.prior, bet.prior)$gamma 
      OR.v2 <- OR.values(phi, cys[2], cns[2], cys[3], cns[3], alp.prior, bet.prior, type="R")
      if (OR.v2>gam2){
        return(3)
      }else{
        return(2)
      }
    }else  if (is.na(cys[3]) | (cover.doses[3]==1)){
      gam1 <- optim.gamma.fn(cns[1], cns[2], phi, "L", alp.prior, bet.prior)$gamma 
      OR.v1 <- OR.values(phi, cys[1], cns[1], cys[2], cns[2], alp.prior, bet.prior, type="L")
      if (OR.v1>gam1){
        return(1)
      }else{
        return(2)
      }
      
    }else  if (!(is.na(cys[1]) | is.na(cys[3]) | cover.doses[3]==1)){
      gam1 <- optim.gamma.fn(cns[1], cns[2], phi, "L", alp.prior, bet.prior)$gamma 
      gam2 <- optim.gamma.fn(cns[2], cns[3], phi, "R", alp.prior, bet.prior)$gamma 
      OR.v1 <- OR.values(phi, cys[1], cns[1], cys[2], cns[2], alp.prior, bet.prior, type="L")
      OR.v2 <- OR.values(phi, cys[2], cns[2], cys[3], cns[3], alp.prior, bet.prior, type="R")
      v1 <- OR.v1 > gam1
      v2 <- OR.v2 > gam2
      if (v1 & !v2){
        return(1)
      }else if (!v1 & v2){
        return(3)
      }else{
        return(2)
      }
    }
  }
}


make.decision.2dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
  cidx.A <- 0
  cidx.B <- 0
  idx.chg.A <- make.decision.1dCFO.fn(phi, cys[2,], cns[2,], alp.prior, bet.prior, cover.doses[2,]) - 2
  idx.chg.B <- make.decision.1dCFO.fn(phi, cys[,2], cns[,2], alp.prior, bet.prior, cover.doses[,2]) - 2
  
  if (idx.chg.A == 1 & idx.chg.B == 1){
    ### horizontal and vertical only
    # OR.R <- OR.values(phi, cys[2,2], cns[2,2], cys[2,3], cns[2,3], alp.prior, bet.prior, type="R")
    # OR.U <- OR.values(phi, cys[2,2], cns[2,2], cys[3,2], cns[3,2], alp.prior, bet.prior, type="R")
    # if (OR.R > OR.U){
    #   cidx.A <- idx.chg.A
    # } else {
    #   cidx.B <- idx.chg.B
    # }
    
    ### diagonal direction
    cidx.A <- idx.chg.A
    cidx.B <- idx.chg.B
    
  } else if (idx.chg.A == -1 & idx.chg.B == -1){
    OR.L <- OR.values(phi, cys[2,2], cns[2,2], cys[2,1], cns[2,1], alp.prior, bet.prior, type="L")
    OR.D <- OR.values(phi, cys[2,2], cns[2,2], cys[1,2], cns[1,2], alp.prior, bet.prior, type="L")
    if (OR.L > OR.D){
      cidx.A <- idx.chg.A
    } else {
      cidx.B <- idx.chg.B
    }
  } else if (idx.chg.A == 1 & idx.chg.B == -1){
    
    DCR <- make.decision.1dCFO.fn(phi, c(cys[1,2],cys[2,2],cys[2,3]), c(cns[1,2],cns[2,2],cns[2,3]), alp.prior, 
                                  bet.prior, c(cover.doses[1,2],cover.doses[2,2],cover.doses[2,3])) - 2
    if (DCR == 1){
      cidx.A <- idx.chg.A
    } else if (DCR == -1){
      cidx.B <- idx.chg.B
    }
  } else if (idx.chg.A == -1 & idx.chg.B == 1){
    LCU <- make.decision.1dCFO.fn(phi, c(cys[2,1],cys[2,2],cys[3,2]), c(cns[2,1],cns[2,2],cns[3,2]), alp.prior, 
                                  bet.prior, c(cover.doses[2,1],cover.doses[2,2],cover.doses[3,2])) - 2
    if (LCU == 1){
      cidx.B <- idx.chg.B
    } else if (DCR == -1){
      cidx.A <- idx.chg.A
    }
  } else {
    cidx.A <- idx.chg.A
    cidx.B <- idx.chg.B
  }
  
  return (c(cidx.A, cidx.B))

}
  
  
overdose.fn <- function(phi, add.args=list()){
  y <- add.args$y
  n <- add.args$n
  alp.prior <- add.args$alp.prior
  bet.prior <- add.args$bet.prior
  pp <- post.prob.fn(phi, y, n, alp.prior, bet.prior)
  if ((pp >= 0.95) & (add.args$n>=3)){
    return(TRUE)
  }else{
    return(FALSE)
  }
}

# Simulation function for CFO
CFO.simu.fn <- function(phi, p.true, ncohort=12, init.level.A=1, init.level.B=1,
                        cohortsize=1, add.args=list()){
  # phi: Target DIL rate
  # p.true: True DIL rates under the different dose levels
  # ncohort: The number of cohorts
  # cohortsize: The sample size in each cohort
  # alp.prior, bet.prior: prior parameters
  earlystop <- 0
  ndose.A <- length(p.true[,1])
  ndose.B <- length(p.true[1,])
  cidx.A <- init.level.A
  cidx.B <- init.level.B
  
  tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
  tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
  tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
  
  
  
  
  for (i in 1:ncohort){
    pc <- p.true[cidx.A, cidx.B] 
    
    # sample from current dose
    cres <- rbinom(cohortsize, 1, pc)
    
    # update results
    tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
    tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
    
    
    
    cy <- tys[cidx.A, cidx.B]
    cn <- tns[cidx.A, cidx.B]
    
    add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
    
    if (overdose.fn(phi, add.args)){
      tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1
    }
    
    if (tover.doses[1,1] == 1){
      earlystop <- 1
      break()
    }
    
    if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
      # no boundary
      cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
      cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
      cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
    } else if (cidx.A==1 & cidx.B==1){
      # (1, 1)
      cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
      cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
      cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
    } else if (cidx.A==ndose.A & cidx.B==ndose.B){
      # (nA, nB)
      cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
      cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
      cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
    } else if (cidx.A==1 & cidx.B==ndose.B){
      # (1, nB) 
      cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
      cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
      cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
    } else if (cidx.A==ndose.A & cidx.B==1){
      # (nA, 1) 
      cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
      cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
      cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
    } else if (cidx.A==1 & cidx.B!=1){
      # (1, 2:(nB-1))
      cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
      cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
      cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
    } else if (cidx.A!=1 & cidx.B==1){
      # (2:(nA-1), 1)
      cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
      cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
      cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
    }
    
    ###############
    idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
    cidx.A <- cidx.A + idx.chg[1]
    cidx.B <- cidx.B + idx.chg[2]
    
    if (cidx.A > ndose.A){
      cidx.A <- cidx.A - 1
    }
    if (cidx.B > ndose.B){
      cidx.B <- cidx.B - 1
    }
    ###########
  }
  
  
  if (earlystop==0){
    MTD <- select.mtd.comb(phi, tns, tys)$MTD
  }else{
    MTD <- c(99,99)
  }
  list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses)
}



