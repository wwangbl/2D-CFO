```{r}
library(pocrm)

p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])

r<-c(p.true.1)

orders<-matrix(nrow=6,ncol=15)
orders[1,]<-c(1,4,7,10,13,2,5,8,11,14,3,6,9,12,15)
orders[2,]<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
orders[3,]<-c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15)
orders[4,]<-c(1,4,2,7,5,3,10,8,6,13,11,9,14,12,15)
orders[5,]<-c(1,2,4,7,5,3,6,8,10,13,11,9,12,14,15)
orders[6,]<-c(1,4,2,3,5,7,10,8,6,9,11,13,14,12,15)

#Specify the skeleton values.
skeleton<-getprior(0.03,0.30,13,15)

#Initial guesses of toxicity probabilities for each ordering.
alpha<-getwm(orders,skeleton)

#We consider all orders to be equally likely prior to the study.
prior.o<-rep(1/6,3)

#Initial escalation in Stage 1 proceeds according to the zones in Figure 1.
#Single patient cohorts are used.
x0<-c(rep(1,3),rep(2,3),rep(4,3),rep(3,3),rep(5,3),rep(7,3),rep(6,3),rep(8,3),rep(10,3),rep(9,3),rep(11,3),rep(13,3),rep(12,3),rep(14,3),rep(15,3))

#Number of patients used to define stopping rule
stop<-61

#Maximum sample size.
n<-60

#The target toxicity rate
theta<-0.30

#Definition of acceptable DLT rates
tox.range<-0.05
```

```{r}
sim <- sim1 <- apred <- lik <- pord <- ord <- ahat <- rpred <- next.lev <- n1 <- N <- NULL
  
d<-ncol(alpha)
s<-nrow(alpha)
d
s
```

```{r}
crm<-function(obs,alpha,prior.o,theta){
  
  sim<<-table(obs$level,obs$tox)
  ifelse(dim(sim)[2]==1,sim1<<-data.frame(as.numeric(row.names(sim)),sim[,1],1-sim[,1]),sim1<<-data.frame(as.numeric(row.names(sim)),sim[,1],sim[,2]))
  names(sim1)<<-c('level','nontox','tox')
  
  apred<<-rep(0,s)
  lik<<-rep(0,s)
  for(k in 1:s){			
    ll<-function(a){
      la<-0 #value of the log-likelihood
      for(i in sim1$level){
        index<-match(i,sim1$level)
        la<-la+sim1$tox[index]*a*log(alpha[k,][i])+sim1$nontox[index]*log((1-alpha[k,][i]**a))
      }
      la
    }
    apred[k]<<-optimize(f=ll,interval=c(0,100),maximum=T)$maximum
    lik[k]<<-ll(apred[k])
  }
  pord<<-(exp(lik)*prior.o)/sum(exp(lik)*prior.o)
  ord<<-which.is.max(pord)
  ahat<<-apred[ord]
  rpred<<-alpha[ord,]**ahat
  next.lev<<-which.is.max(-(abs(rpred-theta)))
  next.lev
}
```

```{r}
n1<<-n+1
obs<-data.frame(cbind(1:n1,rep(0,n1),rep(0,n1),rep(0,n1),rep(0,n1)))
names(obs)<-c('patient','level','tox','a','order')
i<-1
#x0<-lapply(zones,ff)
##'initial.scheme' is a vector indicating the Stage I escalation scheme
initial.scheme<-x0
initial.scheme<-c(initial.scheme,rep(ncol(alpha),n1-length(initial.scheme)))
initial.scheme
```


```{r}
set.seed(2)

n1<<-n+1
obs<-data.frame(cbind(1:n1,rep(0,n1),rep(0,n1),rep(0,n1),rep(0,n1)))
names(obs)<-c('patient','level','tox','a','order')
i<-1
#x0<-lapply(zones,ff)
##'initial.scheme' is a vector indicating the Stage I escalation scheme
initial.scheme<-x0
initial.scheme<-c(initial.scheme,rep(ncol(alpha),n1-length(initial.scheme)))
initial.scheme

obs$level[1:3]<-initial.scheme[1:3]

while(i < n1-3){
  
  for (j in i:(i+2)) {
    obs$order[j]<-99
    p<-runif(1)
    # message(p)
    #number of tox in 1st patient
    message(j)
    if(p<=r[obs$level[j]]) {
      obs$tox[j] <- 1
    }
    
    # message(obs$tox[j])
  }
  
  if(i+3>=stop){
    MTD <- d
    break
  }
  
  if(any(obs$tox[i:(i+2)]==1) & any(obs$tox[i:(i+2)]==0)){
    q<-2
    break
  } else if(all(obs$tox[i:(i+2)]==1)){
    i<-i+3
    obs$level[i:(i+2)]<-initial.scheme[1:3]
  } else if (all(obs$tox[i:(i+2)]==0)){
    i<-i+3
    obs$level[i:(i+2)]<-initial.scheme[i:(i+2)]
  }
}
```



```{r}
N<<-table(obs$level>0)[2]+1
if(any(obs$tox>0)){
  level<-crm(obs[1:(N-1),],alpha,prior.o,theta)
  obs$a[N-1]<-ahat
  obs$order[N-1]<-ord
  
  for(j in N:n1){
    ##assigment for remaining patients
    obs$level[j]<-level
    if(obs$level[n1]>0){
      MTD<-obs$level[n1]
      break
    }
    
    if(length(obs$level[obs$level==level])==stop+1){
      MTD<-level
      break
    }
    
    # index<-runif(1)<=r[obs$level[j]]
    if(length(runif(1)<=r[obs$level[N]])==0){obs$tox[j]<-1} #whether tox or not
    level<-crm(obs[1:j,],alpha,prior.o,theta)
    obs$a[j]<-ahat
    obs$order[j]<-ord
    
    ##crm dose recommendation for Nth patient
  }
} else
  MTD<-d
out<-list(trial=obs[obs$level>0,],MTD.selection=MTD)

```



```{r}

pocrm.sim<-function(r,alpha,prior.o,x0,stop,n,theta,tox.range){
  
  sim <- sim1 <- apred <- lik <- pord <- ord <- ahat <- rpred <- next.lev <- n1 <- N <- NULL
  
  d<-ncol(alpha)
  s<-nrow(alpha)
    
  crm<-function(obs,alpha,prior.o,theta){
    
    sim<<-table(obs$level,obs$tox)
    ifelse(dim(sim)[2]==1,sim1<<-data.frame(as.numeric(row.names(sim)),sim[,1],1-sim[,1]),sim1<<-data.frame(as.numeric(row.names(sim)),sim[,1],sim[,2]))
    names(sim1)<<-c('level','nontox','tox')
    
    apred<<-rep(0,s)
    lik<<-rep(0,s)
    for(k in 1:s){			
      ll<-function(a){
        la<-0 #value of the log-likelihood
        for(i in sim1$level){
          index<-match(i,sim1$level)
          la<-la+sim1$tox[index]*a*log(alpha[k,][i])+sim1$nontox[index]*log((1-alpha[k,][i]**a))
        }
        la
      }
      apred[k]<<-optimize(f=ll,interval=c(0,100),maximum=T)$maximum
      lik[k]<<-ll(apred[k])
    }
    pord<<-(exp(lik)*prior.o)/sum(exp(lik)*prior.o)
    ord<<-which.is.max(pord)
    ahat<<-apred[ord]
    rpred<<-alpha[ord,]**ahat
    next.lev<<-which.is.max(-(abs(rpred-theta)))
    next.lev
  }
  ###'crm' ENDS HERE
  
  
  ###LOAD FUNCTION 'twostgcrm'
  
  twostgcrm<-function(r,x0,stop,n,theta){
    
    n1<<-n+1
    obs<-data.frame(cbind(1:n1,rep(0,n1),rep(0,n1),rep(0,n1),rep(0,n1)))
    names(obs)<-c('patient','level','tox','a','order')
    i<-1
    #x0<-lapply(zones,ff)
    ##'initial.scheme' is a vector indicating the Stage I escalation scheme
    initial.scheme<-x0
    initial.scheme<-c(initial.scheme,rep(ncol(alpha),n1-length(initial.scheme)))
    initial.scheme
    
    obs$level[1:3]<-initial.scheme[1:3]
    
    while(i < n1-3){
      
      for (j in i:(i+2)) {
        obs$order[j]<-99
        p<-runif(1)
        # message(p)
        #number of tox in 1st patient
        message(j)
        if(p<=r[obs$level[j]]) {
          obs$tox[j] <- 1
        }
      }
      
      if(any(obs$tox[i:(i+2)]==1) & any(obs$tox[i:(i+2)]==0)){
        q<-2
        break
      } else if(all(obs$tox[i:(i+2)]==1)){
        i<-i+3
        obs$level[i:(i+2)]<-initial.scheme[1:3]
      } else if (all(obs$tox[i:(i+2)]==0)){
        i<-i+3
        obs$level[i:(i+2)]<-initial.scheme[i:(i+2)]
      }
    }
    
    
    ##2nd stage
    N<<-table(obs$level>0)[2]+1
    if(any(obs$tox>0)){
      level<-crm(obs[1:(N-1),],alpha,prior.o,theta)
      obs$a[N-1]<-ahat
      obs$order[N-1]<-ord
      
      for(j in N:n1){
        ##assigment for remaining patients
        obs$level[j]<-level
        if(obs$level[n1]>0){
          MTD<-obs$level[n1]
          break
        }
        
        if(length(obs$level[obs$level==level])==stop+1){
          MTD<-level
          break
        }
        
        # index<-runif(1)<=r[obs$level[j]]
        if(length(runif(1)<=r[obs$level[N]])==0){obs$tox[j]<-1} #whether tox or not
        level<-crm(obs[1:j,],alpha,prior.o,theta)
        obs$a[j]<-ahat
        obs$order[j]<-ord
        
        ##crm dose recommendation for Nth patient
      }
    } else
      MTD<-d
    out<-list(trial=obs[obs$level>0,],MTD.selection=MTD)
  }
  ###'twostgcrm' ENDS HERE
  
  ###################################################################################

  twostgcrm(r,x0,stop,n,theta)

}
```

```{r}
pocrm.imp <-
function(alpha,prior.o,theta,y,combos){
	
	data<-as.matrix(table(combos,y))
	level<-as.numeric(row.names(data))
	nontox<-as.numeric(data[,1])
	tox<-as.numeric(data[,2])

  apred<-rep(0,nrow(alpha))
  	lik<-rep(0,nrow(alpha))
  	for(k in 1:nrow(alpha)){			
  		ll<-function(a){
  			la<-0 #value of the log-likelihood
  			for(i in level){
  			index<-match(i,level)
  			la<-la+tox[index]*a*log(alpha[k,][i])+nontox[index]*log((1-alpha[k,][i]**a))
  			}
  			la
  			}
  		apred[k]<-optimize(f=ll,interval=c(0,500),maximum=T)$maximum
  		lik[k]<-ll(apred[k])
  		}
  pord<-(exp(lik)*prior.o)/sum(exp(lik)*prior.o)
  #library("nnet") not necessary because listed as package dependency
  ord<-which.is.max(pord)
  ahat<-apred[ord]
  rpred<-alpha[ord,]**ahat
  next.lev<-which.is.max(-(abs(rpred-theta)))
  out<-list(ord.prob=round(pord,3),order.est=ord,a.est=round(ahat,3),ptox.est=round(rpred,3),dose.rec=next.lev)
}
```


```{r}
pocrm.sim1 <- function(r,alpha,prior.o,x0,n,theta){
  y <- combos <- c()
  correct <- npercent <- ntox <- 0
  for (x in x0) {
    combos <- c(combos, rep(x,3))
    
    for (i in 1:3) {
      p<-runif(1)
      if (p<=r[x]){
        y <- c(y,1)
      } else {
        y <- c(y,0)
      }
    }
    
    if(sum(y)>0){
      break
    }
  }
  
  if(length(y)>=n){
    cat('no MTD is selected')
    return(list(correct=0, npercent=0, ntox=0))
  }
  
  while (length(y)<n) {
    idx <- pocrm.imp(alpha,prior.o,theta,y,combos)$dose.rec
    combos <- c(combos, rep(idx,3))
    for (i in 1:3) {
      p<-runif(1)
      if (p<=r[idx]){
        y <- c(y,1)
      } else {
        y <- c(y,0)
      }
    }
  }
  
  MTD <- pocrm.imp(alpha,prior.o,theta,y,combos)$dose.rec
  ntox <- sum(y)
  if(r[MTD]==theta){
    correct <- 1
  }
  for (i in 1:length(r)) {
    if(r[i]==theta){
      npercent <- npercent + length(which(combos==i))
    }
  }
  npercent <- npercent/n
  
  list(correct=correct, npercent=npercent, ntox=ntox)
}
```

```{r}
y <- c(0,0,1)
combos <- c(1,1,1)

data<-as.matrix(table(combos,y))
level<-as.numeric(row.names(data))
nontox<-as.numeric(data[,1])
tox<-as.numeric(data[,2])

apred<-rep(0,nrow(alpha))
	lik<-rep(0,nrow(alpha))
	for(k in 1:nrow(alpha)){			
		ll<-function(a){
			la<-0 #value of the log-likelihood
			for(i in level){
			index<-match(i,level)
			la<-la+tox[index]*a*log(alpha[k,][i])+nontox[index]*log((1-alpha[k,][i]**a))
			}
			la
			}
		apred[k]<-optimize(f=ll,interval=c(0,500),maximum=T)$maximum
		lik[k]<-ll(apred[k])
		}
pord<-(exp(lik)*prior.o)/sum(exp(lik)*prior.o)
#library("nnet") not necessary because listed as package dependency
ord<-which.is.max(pord)
ahat<-apred[ord]
rpred<-alpha[ord,]**ahat
next.lev<-which.is.max(-(abs(rpred-theta)))
out<-list(ord.prob=round(pord,3),order.est=ord,a.est=round(ahat,3),ptox.est=round(rpred,3),dose.rec=next.lev)
```















