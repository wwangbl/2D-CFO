"0","pcs.CFO <- pcs.BOIN <- 0"
"0","npercent.CFO <- npercent.BOIN <- 0"
"0","ntox.CFO <- ntox.BOIN <- 0"
"0","seeds <- 1:5000"
"0",""
"0","simulate6 <- function(i){"
"0","  res.CFO <- CFO.simu.fn(target, p.true.6, ncohort, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=seeds[i])"
"0","  pcs.CFO <<- pcs.CFO + res.CFO$correct"
"0","  npercent.CFO <<- npercent.CFO + as.numeric(sub(""%"","""",res.CFO$npercent))/100"
"0","  ntox.CFO <<- ntox.CFO + res.CFO$ntox"
"0","  "
"0","  res.BOIN <- get.oc.comb(target, p.true.6, ncohort, cohortsize, ntrial=1, seed=seeds[i])"
"0","  pcs.BOIN <<- pcs.BOIN + as.numeric(sub(""%"","""",res.BOIN$pcs))/100"
"0","  npercent.BOIN <<- npercent.BOIN + as.numeric(sub(""%"","""",res.BOIN$npercent))/100"
"0","  ntox.BOIN <<- ntox.BOIN + res.BOIN$totaltox"
"0","}"
"0",""
"0","for (i in 1:5000) {"
"0","  simulate6(i)"
"0","  if(i%%200==0){"
"0","    message(i)"
"0","  }"
"0","}"
"2","200
"
"2","400
"
"2","600
"
"2","800
"
"2","1000
"
"2","1200
"
"2","1400
"
"2","1600
"
"2","1800
"
"2","2000
"
"2","2200
"
"2","2400
"
"2","2600
"
"2","2800
"
"2","3000
"
"2","3200
"
"2","3400
"
"2","3600
"
"2","3800
"
"2","4000
"
"2","4200
"
"2","4400
"
"2","4600
"
"2","4800
"
"2","5000
"
"0","# Simulation function for CFO"
"0","CFO.simu.fn <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, add.args=list(), seed=NULL){"
"0","  # phi: Target DIL rate"
"0","  # p.true: True DIL rates under the different dose levels"
"0","  # ncohort: The number of cohorts"
"0","  # cohortsize: The sample size in each cohort"
"0","  # alp.prior, bet.prior: prior parameters"
"0","  set.seed(seed)"
"0","  earlystop <- 0"
"0","  ndose.A <- length(p.true[,1])"
"0","  ndose.B <- length(p.true[1,])"
"0","  cidx.A <- init.level.A"
"0","  cidx.B <- init.level.B"
"0","  "
"0","  tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses."
"0","  tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses."
"0","  tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes"
"0","  "
"0","  for (i in 1:ncohort){"
"0","    # message(paste(i, '-th step:'))"
"0","    # message(paste('cidx (A,B): (', cidx.A, ',', cidx.B, ')'))"
"0","    "
"0","    pc <- p.true[cidx.A, cidx.B] "
"0","    "
"0","    # sample from current dose"
"0","    cres <- rbinom(cohortsize, 1, pc)"
"0","    "
"0","    # update results"
"0","    tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)"
"0","    tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize"
"0","    "
"0","    cy <- tys[cidx.A, cidx.B]"
"0","    cn <- tns[cidx.A, cidx.B]"
"0","    "
"0","    add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)"
"0","    "
"0","    # quick escalation"
"0","    if (sum(tys)==0){"
"0","      if (cidx.A == ndose.A & cidx.B != ndose.B){"
"0","        cidx.B <- cidx.B +1"
"0","      } else if (cidx.A != ndose.A & cidx.B == ndose.B){"
"0","        cidx.A <- cidx.A +1"
"0","      } else if (cidx.A != ndose.A & cidx.B != ndose.B){"
"0","        rand <- rbinom(1,1,0.5)"
"0","        if(rand == 0){"
"0","          cidx.A <- cidx.A + 1"
"0","        } else {"
"0","          cidx.B <- cidx.B + 1"
"0","        }"
"0","      } else {"
"0","        next"
"0","      }"
"0","      next"
"0","    }"
"0","    "
"0","    # if (overdose.fn(phi, add.args)){"
"0","    #   tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1"
"0","    # }"
"0","    "
"0","    if (tover.doses[1,1] == 1){"
"0","      earlystop <- 1"
"0","      break()"
"0","    }"
"0","    "
"0","    if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){"
"0","      # no boundary"
"0","      cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]"
"0","      cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]"
"0","      cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]"
"0","    } else if (cidx.A==1 & cidx.B==1){"
"0","      # (1, 1)"
"0","      cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))"
"0","      cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))"
"0","      cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))"
"0","    } else if (cidx.A==ndose.A & cidx.B==ndose.B){"
"0","      # (nA, nB)"
"0","      cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))"
"0","      cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))"
"0","      cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))"
"0","    } else if (cidx.A==1 & cidx.B==ndose.B){"
"0","      # (1, nB) "
"0","      cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))"
"0","      cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))"
"0","      cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))"
"0","    } else if (cidx.A==ndose.A & cidx.B==1){"
"0","      # (nA, 1) "
"0","      cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))"
"0","      cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))"
"0","      cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))"
"0","    } else if (cidx.A==1 & cidx.B!=1){"
"0","      # (1, 2:(nB-1))"
"0","      cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])"
"0","      cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])"
"0","      cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])"
"0","    } else if (cidx.A!=1 & cidx.B==1){"
"0","      # (2:(nA-1), 1)"
"0","      cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])"
"0","      cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])"
"0","      cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])"
"0","    } else if (cidx.A==ndose.A & cidx.B!=ndose.B){"
"0","      # (nA, 2:(nB-1))"
"0","      cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))"
"0","      cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))"
"0","      cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))"
"0","    } else if (cidx.A!=ndose.A & cidx.B==ndose.B){"
"0","      # (2:(nA-1), nB)"
"0","      cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))"
"0","      cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))"
"0","      cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))"
"0","    } else {"
"0","      message('no such case')"
"0","    }"
"0",""
"0","    idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)"
"0","    cidx.A <- cidx.A + idx.chg[1]"
"0","    cidx.B <- cidx.B + idx.chg[2]"
"0","  }"
"0","  "
"0","  if (earlystop==0){"
"0","    MTD <- select.mtd.comb(phi, tns, tys)$MTD"
"0","  }else{"
"0","    MTD <- c(99,99)"
"0","  }"
"0","  "
"0","  correct <- 0"
"0","  if(MTD[1]>ndose.A | MTD[2]>ndose.B){"
"0","    correct <- 0"
"0","  } else if (p.true[MTD[1],MTD[2]]==phi){"
"0","    correct <- 1"
"0","  }"
"0",""
"0","  npercent <- 0"
"0","  for (j in 1:ndose.A) {"
"0","    for (k in 1:ndose.B) {"
"0","      if (p.true[j,k]==phi){"
"0","        npercent <- npercent + tns[j,k]"
"0","      }"
"0","    }"
"0","  }"
"0","  npercent <- percent(npercent/(ncohort*cohortsize))"
"0","  list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses, correct=correct, npercent=npercent, ntox=sum(tys))"
"0","}"
"0","source(""C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R"", echo=TRUE)"
"1","
"
"1",""
"1","> library(magrittr)"
"1",""
"1","
"
"1","
"
"1",""
"1","> library(BOIN)"
"1",""
"1","
"
"1","
"
"1",""
"1","> library(scales)"
"1",""
"1","
"
"1","
"
"1",""
"1","> library(dfcomb)"
"1",""
"1","
"
"1","
"
"1",""
"1","> # posterior probability of pj >= phi given data
> post.prob.fn <- function(phi, y, n, alp.prior=0.1, bet.prior=0.1){
+   alp <- alp.prior + y 
+   b"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
+   alp1 <- alp.prior + y1
+   alp2 <- alp.prior + y2
+   bet1 <- alp.prior + n1 - "
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> OR.values <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior, type){
+   ps <- prob.int(phi, y1, n1, y2, n2, alp.prior, bet.prior)
+   if (type=="
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> All.OR.table <- function(phi, n1, n2, type, alp.prior, bet.prior){
+   ret.mat <- matrix(rep(0, (n1+1)*(n2+1)), nrow=n1+1)
+   for (y1cur in 0:n1){
"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> # compute the marginal prob when lower < phiL/phiC/phiR < upper
> # i.e., Pr(Y=y|lower<phi<upper)
> margin.phi <- function(y, n, lower, upper){
+   "
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> # Obtain the table of marginal distribution of (y1, y2)
> # after intergrate out (phi1, phi2)
> # under H0 and H1
> # H0: phi1=phi, phi < phi2 < 2ph"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> # Obtain the optimal gamma for the hypothesis test
> optim.gamma.fn <- function(n1, n2, phi, type, alp.prior, bet.prior){
+   # message('calculating"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> make.decision.1dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
+   if (cover.doses[2] == 1){
+     return(1)
+   "
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> make.decision.2dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
+   cidx.A <- 0
+   cidx.B <- 0
+   # horizontal d"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> overdose.fn <- function(phi, add.args=list()){
+   y <- add.args$y
+   n <- add.args$n
+   alp.prior <- add.args$alp.prior
+   bet.prior <- add.args"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> # Simulation function for CFO
> CFO.simu.fn <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, add.args=list(), seed"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> select.mtd.comb <- function (target, npts, ntox, cutoff.eli = 0.95, extrasafe = FALSE,
+                              offset = 0.05, boundMTD=FALSE,"
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
"1","
"
"1",""
"1","> dfcomb.simu.fn = function(ndose_a1, ndose_a2, p_tox, target, target_min, target_max, prior_tox_a1, prior_tox_a2, n_cohort,
+                        "
"1",""
"1"," .... [TRUNCATED] "
"1",""
"1","
"
