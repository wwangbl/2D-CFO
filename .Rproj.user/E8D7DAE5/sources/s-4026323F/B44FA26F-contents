---
title: "ensemble"
output: html_document
---


```{r}
source("2D_CFO_MTD.R")
source("pocrm.R")
library(dfcomb)
library(pocrm)
library(parallel)

#Specifiy the possible orderings from Section 3.3.
orders<-matrix(nrow=6,ncol=15)
orders[1,]<-c(1,4,7,10,13,2,5,8,11,14,3,6,9,12,15)
orders[2,]<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
orders[3,]<-c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15)
orders[4,]<-c(1,4,2,7,5,3,10,8,6,13,11,9,14,12,15)
orders[5,]<-c(1,2,4,7,5,3,6,8,10,13,11,9,12,14,15)
orders[6,]<-c(1,4,2,3,5,7,10,8,6,9,11,13,14,12,15)

#Specify the skeleton values.
skeleton<-getprior(0.03,0.30,13,15)

#Initial guesses of toxicity probabilities for each ordering.
alpha<-getwm(orders,skeleton)

#We consider all orders to be equally likely prior to the study.
prior.o<-rep(1/6,3)

getmode <- function(v) {
 uniqv <- unique(v)
 uniqv[which.max(tabulate(match(v, uniqv)))]
}


target <- 0.30
ncohort <- 20
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
n.cores <- detectCores()
prior_a1 = c(0.1, 0.2, 0.3)
prior_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
prior_tox_a1 = c(0.2, 0.3, 0.4)
prior_tox_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
order <- c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15)
seeds <- 1:5000

add.args <- list(alp.prior=target, bet.prior=1-target)
```




```{r}
ensemble <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, add.args=list(), prior_tox_a1, prior_tox_a2, prior.o, x0, stop, tox.range, seed=NULL){

set.seed(seed)
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B

tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes

pre <- preliminary(p.true, ndose.A, ndose.B, tys, tns, seed)
cidx.A <- pre$position[1]
cidx.B <- pre$position[2]
tys <- pre$tys
tns <- pre$tns
ncohort <- ((ncohort*cohortsize) - sum(tns))%/%3 + 1

dose1 <- which(tns==1,arr.ind = T)[,1]
dose2 <- which(tns==1,arr.ind = T)[,2]
if(sum(tys==1)){
  toxicity1 <- c(rep(0,length(dose1)-1),1)
  y <- c(rep(0,(sum(tns)-1)),1)
} else {
  toxicity1 <- rep(0,length(dose1))
  y <- rep(0,sum(tns))
}

#combos <- c(tns[,1][tns[,1]!=0],tns[,1][2:length(tys[,1])][tns[,1][2:length(tns[,1])]!=0])
a <- matrix(1:15,3,5)

if(sum(tns)<=ndose.A){
  combos <- a[1:sum(tns),1]
} else {
  combos <- a[1:ndose.A,1]
  combos <- c(combos,a[1,2:(sum(tns)-ndose.A+1)])
}


for (i in 1:ncohort){
  
  pc <- p.true[cidx.A, cidx.B] 
  
  # sample from current dose
  cres <- rbinom(cohortsize, 1, pc)
  
  # update results
  tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
  tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
  
  y <- c(y,cres)
  combos <- c(combos,rep(a[cidx.A, cidx.B],cohortsize))
  dose1 <- c(dose1,rep(cidx.A,cohortsize))
  dose2 <- c(dose2,rep(cidx.B,cohortsize))
  toxicity1 <- c(toxicity1, cres)
  
  cy <- tys[cidx.A, cidx.B]
  cn <- tns[cidx.A, cidx.B]
  
  add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
  
  
  if (tover.doses[1,1] == 1){
    earlystop <- 1
    break()
  }
  
  if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
    # no boundary
    cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
    cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
    cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
  } else if (cidx.A==1 & cidx.B==1){
    # (1, 1)
    cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
    cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
    cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
  } else if (cidx.A==ndose.A & cidx.B==ndose.B){
    # (nA, nB)
    cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
    cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
    cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
  } else if (cidx.A==1 & cidx.B==ndose.B){
    # (1, nB) 
    cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
    cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
    cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
  } else if (cidx.A==ndose.A & cidx.B==1){
    # (nA, 1) 
    cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
    cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
    cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
  } else if (cidx.A==1 & cidx.B!=1){
    # (1, 2:(nB-1))
    cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
    cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
    cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
  } else if (cidx.A!=1 & cidx.B==1){
    # (2:(nA-1), 1)
    cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
    cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
    cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
  } else if (cidx.A==ndose.A & cidx.B!=ndose.B){
    # (nA, 2:(nB-1))
    cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
    cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
    cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
  } else if (cidx.A!=ndose.A & cidx.B==ndose.B){
    # (2:(nA-1), nB)
    cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
    cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
    cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
  } else {
    message('no such case')
  }
  
  ###################
  idx.CFO <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
  idx.BOIN <- next.comb(phi, tns, tys, c(cidx.A, cidx.B))$next_dc - c(cidx.A, cidx.B)
  idx.dfcomb <- CombIncrease_next(ndose.A, ndose.B, phi, target_min=0.2, target_max=0.4, prior_tox_a1, prior_tox_a2, cohortsize, 
                                  final=FALSE, pat_incl=sum(tns), dose_adm1=dose1, dose_adm2=dose2, toxicity=toxicity1, c_over=1, 
                                  cmin_overunder=3, cmin_recom=1, early_stop=1, alloc_rule=1)
  idx.dfcomb <- c(idx.dfcomb$cdose1 - cidx.A, idx.dfcomb$cdose2 - cidx.B)
  idx.pocrm <- which(a==pocrm.imp(alpha,prior.o,phi,y,combos)$dose.rec, arr.ind = TRUE) - c(cidx.A, cidx.B)
  
  A.idx <- c(idx.CFO[1],idx.BOIN[1],idx.dfcomb[1],idx.pocrm[1])
  B.idx <- c(idx.CFO[2],idx.BOIN[2],idx.dfcomb[2],idx.pocrm[2])
  
  cidx.A <- cidx.A + getmode(A.idx)
  cidx.B <- cidx.B + getmode(B.idx)
}


if (earlystop==0){
  MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
  MTD <- c(99,99)
}

correct <- 0
if(MTD[1]>ndose.A | MTD[2]>ndose.B){
  correct <- 0
} else if (p.true[MTD[1],MTD[2]]==phi){
  correct <- 1
}

npercent <- 0
for (j in 1:ndose.A) {
  for (k in 1:ndose.B) {
    if (p.true[j,k]==phi){
      npercent <- npercent + tns[j,k]
    }
  }
}
npercent <- percent(npercent/(ncohort*cohortsize))
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses, correct=correct, npercent=npercent, ntox=sum(tys))
}

```


```{r}
p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])

ensemble(target, p.true.1, 20, cohortsize, init.level.A=1, init.level.B=1, add.args=add.args, prior_tox_a1, prior_tox_a2, prior.o, x0, stop, tox.range, seed=1)
```

```{r}
cohortsize <- 3
ncohort <- 20
init.level.A=1
init.level.B=1
p.true <- p.true.1
phi <- 0.3
seed <- 1
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B

tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes

pre <- preliminary(p.true, ndose.A, ndose.B, tys, tns, seed)
cidx.A <- pre$position[1]
cidx.B <- pre$position[2]
tys <- pre$tys
tns <- pre$tns
ncohort <- ((ncohort*cohortsize) - sum(tns))%/%3 + 1

dose1 <- which(tns==1,arr.ind = T)[,1]
dose2 <- which(tns==1,arr.ind = T)[,2]
if(sum(tys==1)){
  toxicity1 <- c(rep(0,length(dose1)-1),1)
  y <- c(rep(0,(sum(tns)-1)),1)
} else {
  toxicity1 <- rep(0,length(dose1))
  y <- rep(0,sum(tns))
}

#combos <- c(tns[,1][tns[,1]!=0],tns[,1][2:length(tys[,1])][tns[,1][2:length(tns[,1])]!=0])
a <- matrix(1:15,3,5)

if(sum(tns)<=ndose.A){
  combos <- a[1:sum(tns),1]
} else {
  combos <- a[1:ndose.A,1]
  combos <- c(combos,a[1,2:(sum(tns)-ndose.A+1)])
}


for (i in 1:ncohort){
  
  pc <- p.true[cidx.A, cidx.B] 
  
  # sample from current dose
  cres <- rbinom(cohortsize, 1, pc)
  
  # update results
  tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
  tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
  
  y <- c(y,cres)
  combos <- c(combos,rep(a[cidx.A, cidx.B],cohortsize))
  dose1 <- c(dose1,rep(cidx.A,cohortsize))
  dose2 <- c(dose2,rep(cidx.B,cohortsize))
  toxicity1 <- c(toxicity1, cres)
  
  cy <- tys[cidx.A, cidx.B]
  cn <- tns[cidx.A, cidx.B]
  
  add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
  
  
  if (tover.doses[1,1] == 1){
    earlystop <- 1
    break()
  }
  
  if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
    # no boundary
    cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
    cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
    cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
  } else if (cidx.A==1 & cidx.B==1){
    # (1, 1)
    cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
    cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
    cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
  } else if (cidx.A==ndose.A & cidx.B==ndose.B){
    # (nA, nB)
    cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
    cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
    cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
  } else if (cidx.A==1 & cidx.B==ndose.B){
    # (1, nB) 
    cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
    cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
    cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
  } else if (cidx.A==ndose.A & cidx.B==1){
    # (nA, 1) 
    cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
    cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
    cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
  } else if (cidx.A==1 & cidx.B!=1){
    # (1, 2:(nB-1))
    cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
    cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
    cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
  } else if (cidx.A!=1 & cidx.B==1){
    # (2:(nA-1), 1)
    cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
    cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
    cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
  } else if (cidx.A==ndose.A & cidx.B!=ndose.B){
    # (nA, 2:(nB-1))
    cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
    cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
    cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
  } else if (cidx.A!=ndose.A & cidx.B==ndose.B){
    # (2:(nA-1), nB)
    cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
    cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
    cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
  } else {
    message('no such case')
  }
  
  ###################
  idx.CFO <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
  idx.BOIN <- next.comb(phi, tns, tys, c(cidx.A, cidx.B))$next_dc - c(cidx.A, cidx.B)
  idx.dfcomb <- CombIncrease_next(ndose.A, ndose.B, phi, target_min=0.2, target_max=0.4, prior_tox_a1, prior_tox_a2, cohortsize, 
                                  final=FALSE, pat_incl=sum(tns), dose_adm1=dose1, dose_adm2=dose2, toxicity=toxicity1, c_over=1, 
                                  cmin_overunder=3, cmin_recom=1, early_stop=1, alloc_rule=1)
  idx.dfcomb <- c(idx.dfcomb$cdose1 - cidx.A, idx.dfcomb$cdose2 - cidx.B)
  idx.pocrm <- which(a==pocrm.imp(alpha,prior.o,phi,y,combos)$dose.rec, arr.ind = TRUE) - c(cidx.A, cidx.B)
  
  A.idx <- c(idx.CFO[1],idx.BOIN[1],idx.dfcomb[1],idx.pocrm[1])
  B.idx <- c(idx.CFO[2],idx.BOIN[2],idx.dfcomb[2],idx.pocrm[2])
  
  cidx.A <- cidx.A + getmode(A.idx)
  cidx.B <- cidx.B + getmode(B.idx)
}

```









