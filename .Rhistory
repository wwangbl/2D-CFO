stop("the offset is too large!")
}
if (n.earlystop <= 6) {
warning("the value of n.earlystop is too low to ensure good operating characteristics. Recommend n.earlystop = 9 to 18")
}
ndose = length(p.true)
npts = ncohort * cohortsize
Y <- array(matrix(rep(0, length(p.true) * ntrial), dim(p.true)[1]),
dim = c(dim(p.true), ntrial))
N <- array(matrix(rep(0, length(p.true) * ntrial), dim(p.true)[1]),
dim = c(dim(p.true), ntrial))
dselect = matrix(rep(0, 2 * ntrial), ncol = 2)
if (cohortsize > 1) {
temp = get.boundary(target, ncohort, cohortsize,
n.earlystop=100, p.saf, p.tox, cutoff.eli, extrasafe)$full_boundary_tab
}else {
temp = get.boundary(target, ncohort, cohortsize,
n.earlystop=100, p.saf, p.tox, cutoff.eli, extrasafe)$boundary_tab
}
b.e = temp[2, ]
b.d = temp[3, ]
b.elim = temp[4, ]
lambda1 = log((1 - p.saf)/(1 - target))/log(target *
(1 - p.saf)/(p.saf * (1 - target)))
lambda2 = log((1 - target)/(1 - p.tox))/log(p.tox * (1 -
target)/(target * (1 - p.tox)))
if (cohortsize == 1)
titration = FALSE
for (trial in 1:ntrial) {
y <- matrix(rep(0, ndose), dim(p.true)[1], dim(p.true)[2])
n <- matrix(rep(0, ndose), dim(p.true)[1], dim(p.true)[2])
earlystop = 0
d = startdose
elimi = matrix(rep(0, ndose), dim(p.true)[1], dim(p.true)[2])
ft=TRUE #flag used to determine whether or not to add cohortsize-1 patients to a dose for the first time when titration is triggered.
if (titration) {
tmpa = d[1]
tmpb = d[2]
y[tmpa, tmpb] <- (runif(1) < p.true[tmpa, tmpb])
n[tmpa, tmpb] <- 1
while (tmpa <= dim(p.true)[1] & tmpb <= dim(p.true)[2]) {
if (tmpa == dim(p.true)[1] & tmpb == dim(p.true)[2]) {
break
}
if (sum(y) == 1) {
y[tmpa, tmpb] = 1
break
}
if (tmpa < dim(p.true)[1] & tmpb < dim(p.true)[2]) {
tmp.candidate = rbind(c(tmpa + 1, tmpb),
c(tmpa, tmpb + 1))
tmp.sel = rbinom(1, 1, prob = c(0.5, 0.5)) +
1
tmpa = tmp.candidate[tmp.sel, 1]
tmpb = tmp.candidate[tmp.sel, 2]
}
else if (tmpa == dim(p.true)[1]) {
tmpb = tmpb + 1
}
else {
tmpa = tmpa + 1
}
y[tmpa, tmpb] <- (runif(1) < p.true[tmpa, tmpb])
n[tmpa, tmpb] <- 1
}
if (sum(y) == 0) {
d = c(dim(p.true)[1], dim(p.true)[2])
}
else {
d = c(tmpa, tmpb)
}
}
for (pp in 1:ncohort) {
if (titration & n[d[1], d[2]] < cohortsize & ft) {
ft=FALSE
y[d[1], d[2]] = y[d[1], d[2]] + sum(runif(cohortsize -
1) < p.true[d[1], d[2]])
n[d[1], d[2]] = n[d[1], d[2]] + cohortsize -1
}
else {
y[d[1], d[2]] = y[d[1], d[2]] + sum(runif(cohortsize) <
p.true[d[1], d[2]])
n[d[1], d[2]] = n[d[1], d[2]] + cohortsize
}
nc = n[d[1], d[2]]
if (!is.na(b.elim[nc])) {
if (y[d[1], d[2]] >= b.elim[nc]) {
for (i in min(d[1], dim(p.true)[1]):dim(p.true)[1]) {
for (j in min(d[2], dim(p.true)[2]):dim(p.true)[2]) {
elimi[i, j] = 1
}
}
if (d[1] == 1 && d[2] == 1) {
d = c(99, 99)
earlystop = 1
break
}
}
if (extrasafe) {
if (d[1] == 1 && d[2] == 1 && n[1, 1] >=
3) {
if (1 - pbeta(target, y[1, 1] + 1, n[1,
1] - y[1, 1] + 1) > cutoff.eli - offset) {
d = c(99, 99)
earlystop = 1
break
}
}
}
}
if (n[d[1],d[2]] >= n.earlystop  && (y[d[1],d[2]]>b.e[n[d[1],d[2]]] ||
(d[1]==dim(p.true)[1] && d[2]==dim(p.true)[2]) ||
( d[1]==dim(p.true)[1] && d[2]<dim(p.true)[2] && elimi[d[1],d[2]+1]==1 ) ||
( d[1]<dim(p.true)[1] && d[2]==dim(p.true)[2] && elimi[d[1]+1,d[2]]==1 ) ||
( d[1]<dim(p.true)[1] && d[2]<dim(p.true)[2] && elimi[d[1]+1,d[2]]==1 && elimi[d[1],d[2]+1]==1 ) )  &&
(y[d[1],d[2]]<b.d[n[d[1],d[2]]] || (d[1]==1 && d[2]==1) ) ) break;
if (y[d[1], d[2]] <= b.e[nc]) {
elevel = matrix(c(1, 0, 0, 1), 2)
pr_H0 = rep(0, length(elevel)/2)
nn = pr_H0
for (i in seq(1, length(elevel)/2, by = 1)) {
if (d[1] + elevel[1, i] <= dim(p.true)[1] &&
d[2] + elevel[2, i] <= dim(p.true)[2]) {
if (elimi[d[1] + elevel[1, i], d[2] + elevel[2,
i]] == 0) {
yn = y[d[1] + elevel[1, i], d[2] + elevel[2,
i]]
nn[i] = n[d[1] + elevel[1, i], d[2] +
elevel[2, i]]
pr_H0[i] <- pbeta(lambda2, yn + 0.5,
nn[i] - yn + 0.5) - pbeta(lambda1,
yn + 0.5, nn[i] - yn + 0.5)
}
}
}
pr_H0 = pr_H0 + nn * 5e-04
if (max(pr_H0) == 0) {
d = d
}
else {
k = which(pr_H0 == max(pr_H0))[as.integer(runif(1) *
length(which(pr_H0 == max(pr_H0))) + 1)]
d = d + c(elevel[1, k], elevel[2, k])
}
}
else if (y[d[1], d[2]] >= b.d[nc]) {
delevel = matrix(c(-1, 0, 0, -1), 2)
pr_H0 = rep(0, length(delevel)/2)
nn = pr_H0
for (i in seq(1, length(delevel)/2, by = 1)) {
if (d[1] + delevel[1, i] > 0 && d[2] + delevel[2,
i] > 0) {
yn = y[d[1] + delevel[1, i], d[2] + delevel[2,
i]]
nn[i] = n[d[1] + delevel[1, i], d[2] +
delevel[2, i]]
pr_H0[i] = pbeta(lambda2, yn + 0.5, nn[i] -
yn + 0.5) - pbeta(lambda1, yn + 0.5,
nn[i] - yn + 0.5)
}
}
pr_H0 = pr_H0 + nn * 5e-04
if (max(pr_H0) == 0) {
d = d
}
else {
k = which(pr_H0 == max(pr_H0))[as.integer(runif(1) *
length(which(pr_H0 == max(pr_H0))) + 1)]
d = d + c(delevel[1, k], delevel[2, k])
}
}
else {
d = d
}
}
Y[, , trial] = y
N[, , trial] = n
if (earlystop == 1) {
dselect[trial, ] = c(99, 99)
}else {
selcomb = select.mtd.comb.boin(target, n, y,
cutoff.eli, extrasafe, offset,
boundMTD=boundMTD,p.tox=p.tox,mtd.contour = FALSE)$MTD
dselect[trial, 1] = selcomb[1]
dselect[trial, 2] = selcomb[2]
}
}
selpercent = matrix(rep(0, ndose), dim(p.true)[1], dim(p.true)[2])
nptsdose = apply(N, c(1, 2), mean, digits = 2, format = "f")
ntoxdose = apply(Y, c(1, 2), mean, digits = 2, format = "f")
for (i in 1:dim(p.true)[1]) for (j in 1:dim(p.true)[2]) {
{
selpercent[i, j] = sum(dselect[, 1] == i & dselect[,
2] == j)/ntrial * 100
}
}
if (JJ <= KK) {
rownames(p.true) = paste("DoseA", 1:dim(p.true)[1],
sep = "")
colnames(p.true) = paste("DoseB", 1:dim(p.true)[2],
sep = "")
rownames(selpercent) = paste("DoseA", 1:dim(p.true)[1],
sep = "")
colnames(selpercent) = paste("DoseB", 1:dim(p.true)[2],
sep = "")
out = list(p.true = round(p.true, 2), selpercent = round(selpercent,2),
npatients = round(apply(N, c(1, 2), mean),2), ntox = round(apply(Y, c(1, 2), mean), 2),
totaltox = round(sum(Y)/ntrial, 1), totaln = round(sum(N)/ntrial,1),
pcs = paste(round(sum(selpercent[which(abs(p.true -target) == min(abs(p.true - target)), arr.ind = TRUE)]),1), "%", sep = ""),
npercent = paste(round(sum(nptsdose[which(abs(p.true -target) == min(abs(p.true - target)), arr.ind = TRUE)])/sum(nptsdose) *100, 1), "%", sep = ""),
percentstop=100-sum(round(selpercent,2)),flowchart = FALSE)
rownames(out$npatients) = paste("DoseA", 1:dim(p.true)[1],
sep = "")
colnames(out$npatients) = paste("DoseB", 1:dim(p.true)[2],
sep = "")
rownames(out$ntox) = paste("DoseA", 1:dim(p.true)[1],
sep = "")
colnames(out$ntox) = paste("DoseB", 1:dim(p.true)[2],
sep = "")
return(out)
}
else {
colnames(p.true) = paste("DoseB", 1:dim(t(p.true))[1],
sep = "")
rownames(p.true) = paste("DoseA", 1:dim(t(p.true))[2],
sep = "")
colnames(selpercent) = paste("DoseB", 1:dim(t(p.true))[1],
sep = "")
rownames(selpercent) = paste("DoseA", 1:dim(t(p.true))[2],
sep = "")
colnames(npatients) = paste("DoseB", 1:dim(t(p.true))[1],
sep = "")
rownames(npatients) = paste("DoseA", 1:dim(t(p.true))[2],
sep = "")
colnames(ntox) = paste("DoseB", 1:dim(t(p.true))[1],
sep = "")
rownames(ntox) = paste("DoseA", 1:dim(t(p.true))[2],
sep = "")
out = list(p.true = round(t(p.true), 2), selpercent = round(t(selpercent),2),
npatients = round(t(apply(N, c(1, 2), mean)), 2), ntox = round(t(apply(Y, c(1, 2), mean)),2),
totaltox = round(sum(Y)/ntrial, 1), totaln = round(sum(N)/ntrial,1), pcs = paste(round(sum(selpercent[which(abs(p.true -target) == min(abs(p.true - target)), arr.ind = TRUE)]),
1), "%"), npercent = paste(round(sum(nptsdose[which(abs(p.true -target) == min(abs(p.true - target)), arr.ind = TRUE)])/sum(nptsdose) *100, 1), "%"),
percentstop=100-sum(round(selpercent,2)),
flowchart = FALSE)
return(out)
}
}
get.oc.comb.boin(target, p[,,10], 37, cohortsize, ntrial=10)
select.mtd.comb.boin <- function(target, npts, ntox, cutoff.eli = 0.95,
extrasafe = FALSE, offset = 0.05,
boundMTD=FALSE,p.tox=1.4*target,
mtd.contour = FALSE) {
lambda_d = log((1 - target)/(1 - p.tox))/log(p.tox * (1 -target)/(target * (1 - p.tox)))
y = ntox
n = npts
if (nrow(n) > ncol(n) | nrow(y) > ncol(y)) {
stop("npts and ntox should be arranged in a way (i.e., rotated) such that for each of them, the number of rows is less than or equal to the number of columns.")
}
elimi = matrix(0, dim(n)[1], dim(n)[2])
if (extrasafe) {
if (n[1, 1] >= 3) {
if (1 - pbeta(target, y[1, 1] + 1, n[1, 1] -
y[1, 1] + 1) > cutoff.eli - offset) {
elimi[, ] = 1
}
}
}
for (i in 1:dim(n)[1]) {
for (j in 1:dim(n)[2]) {
if (n[i, j] >= 3) {
if (1 - pbeta(target, y[i, j] + 1, n[i, j] -
y[i, j] + 1) > cutoff.eli) {
elimi[i:dim(n)[1], j] = 1
elimi[i, j:dim(n)[2]] = 1
break
}
}
}
}
selectdose=NULL
if (elimi[1] == 1) {
selectdose = c(99, 99)
selectdoses = matrix(selectdose, nrow = 1)
}else {
phat = (y + 0.05)/(n + 0.1)
phat = Iso::biviso(phat, n + 0.1, warn = TRUE)[,
]
phat.out = phat
phat.out[n == 0] = NA
phat[elimi == 1] = 1.1
phat = phat * (n != 0) + (1e-05) * (matrix(rep(1:dim(n)[1],
each = dim(n)[2], len = length(n)), dim(n)[1],
byrow = T) + matrix(rep(1:dim(n)[2], each = dim(n)[1],
len = length(n)), dim(n)[1]))
if(boundMTD){
if(all(phat[n!=0]>=lambda_d)){
selectdose = c(99, 99)
selectdoses = matrix(selectdose, nrow = 1)
}else{
phat[phat>=lambda_d]=10}}
if(is.null(selectdose)){
phat[n == 0] = 10
selectdose = which(abs(phat - target) == min(abs(phat -
target)), arr.ind = TRUE)
if (length(selectdose) > 2)
selectdose = selectdose[1, ]
aa = function(x) as.numeric(as.character(x))
if (mtd.contour == TRUE) {
selectdoses = cbind(row = 1:dim(n)[1], col = rep(99,
dim(n)[1]))
for (k in dim(n)[1]:1) {
kn = n[k, ]
ky = y[k, ]
kelimi = elimi[k, ]
kphat = phat[k, ]
if (kelimi[1] == 1 || sum(n[kelimi == 0]) ==
0) {
kseldose = 99
}
else {
adm.set = (kn != 0) & (kelimi == 0)
adm.index = which(adm.set == T)
y.adm = ky[adm.set]
n.adm = kn[adm.set]
selectd = sort(abs(kphat[adm.set] - target),
index.return = T)$ix[1]
kseldose = adm.index[selectd]
}
selectdoses[k, 2] = ifelse(is.na(kseldose),
99, kseldose)
if (k < dim(n)[1])
if (selectdoses[k + 1, 2] == dim(n)[2])
selectdoses[k, 2] = dim(n)[2]
if (k < dim(n)[1])
if (aa(selectdoses[k + 1, 2]) == dim(n)[2] &
aa(selectdoses[k + 1, 2]) == aa(selectdoses[k,
2]))
selectdoses[k, 2] = 99
}
}
else {
selectdoses = matrix(99, nrow = 1, ncol = 2)
selectdoses[1, ] = matrix(selectdose, nrow = 1)
}
selectdoses = matrix(selectdoses[selectdoses[, 2] !=
99, ], ncol = 2)
}
colnames(selectdoses) = c("DoseA", "DoseB")
}
if (mtd.contour == FALSE) {
if (selectdoses[1, 1] == 99 && selectdoses[1, 2] ==
99) {
out=list(target = target, MTD = 99, p_est = matrix(NA,
nrow = dim(npts)[1], ncol = dim(npts)[2]))
return(out)
}
else {
out=list(target = target, MTD = selectdoses,
p_est = round(phat.out, 2))
return(out)
}
}
else {
if (length(selectdoses) == 0) {
out=list(target = target, MTD = 99, p_est = matrix(NA,
nrow = dim(npts)[1], ncol = dim(npts)[2]))
return(out)
}
else {
out=list(target = target, MTD = selectdoses,
p_est = round(phat.out, 2))
return(out)
}
}
}
get.oc.comb.boin(target, p[,,10], 37, cohortsize, ntrial=10)
get.oc.comb.boin(target, p[,,10], 37, cohortsize, ntrial=1000)
get.oc.comb.boin(target, p[,,10], 37, cohortsize, ntrial=100)
matrix(1:16,4,4)
matrix(1:15,3,5)
#Specifiy the possible orderings from Section 3.3.
orders<-matrix(nrow=6,ncol=20)
orders[1,]<-c(1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16)
#Specifiy the possible orderings from Section 3.3.
orders<-matrix(nrow=6,ncol=16)
orders[1,]<-c(1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16)
orders[2,]<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
orders[3,]<-c(1,2,5,3,6,9,4,7,10,13,8,11,14,12,15,16)
orders[4,]<-c(1,5,2,9,6,3,13,10,7,4,14,11,8,15,12,16)
orders[5,]<-c(1,2,5,9,6,3,4,7,10,13,14,11,8,12,15,16)
orders[6,]<-c(1,5,2,3,6,9,13,10,7,4,8,11,14,15,12,16)
#Specify the skeleton values.
skeleton<-getprior(0.03,0.30,13,16)
source("C:/Users/User/Desktop/2D-CFO/pocrm.R", echo=TRUE)
source("2D_CFO_MTD.R")
source("pocrm.R")
library(parallel)
target <- 0.30
ncohort <- 20
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
prior_a1 = c(0.1, 0.2, 0.3)
prior_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
prior_tox_a1 = c(0.2, 0.3, 0.4)
prior_tox_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
order <- c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15)
seeds <- 1:5000
add.args <- list(alp.prior=target, bet.prior=1-target)
#Specifiy the possible orderings from Section 3.3.
orders<-matrix(nrow=6,ncol=16)
orders[1,]<-c(1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16)
orders[2,]<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
orders[3,]<-c(1,2,5,3,6,9,4,7,10,13,8,11,14,12,15,16)
orders[4,]<-c(1,5,2,9,6,3,13,10,7,4,14,11,8,15,12,16)
orders[5,]<-c(1,2,5,9,6,3,4,7,10,13,14,11,8,12,15,16)
orders[6,]<-c(1,5,2,3,6,9,13,10,7,4,8,11,14,15,12,16)
#Specify the skeleton values.
skeleton<-getprior(0.03,0.30,13,16)
#Initial guesses of toxicity probabilities for each ordering.
alpha<-getwm(orders,skeleton)
#We consider all orders to be equally likely prior to the study.
prior.o<-rep(1/6,6)
#Initial escalation in Stage 1 proceeds according to the zones in Figure 1.
#Single patient cohorts are used.
x0<-c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15,16)
#Number of patients used to define stopping rule
stop<-61
#Maximum sample size.
n<-60
#The target toxicity rate
theta<-0.30
#Definition of acceptable DLT rates
tox.range<-0.05
random(4,4,nMTD=2,0.01)
random(4,4,nMTD=3,0.01)
random(4,4,nMTD=3,0.01)
random(4,4,nMTD=3,0.01)
random(4,4,nMTD=3,0.01)
library(dfcomb)
source("2D_CFO_MTD.R")
prior_tox_a1 <- c(0.1,0.2,0.3,0.4,0.5)
prior_tox_a2 <- c(0.1,0.2,0.3,0.4)
p <- list()
p[[1]] <- c(0.01, 0.03, 0.06, 0.10, 0.18)
p[[2]] <- c(0.01, 0.07, 0.12, 0.21, 0.33)
p[[3]] <- c(0.03, 0.15, 0.24, 0.38, 0.53)
p[[4]] <- c(0.06, 0.33, 0.42, 0.58, 0.72)
p <- rbind(p[[1]],p[[2]],p[[3]],p[[4]])
p
CFO.simu.fn(0.33, p, prelim=0, ncohort=22, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
CFO.simu.fn(0.33, p, prelim=0, ncohort=33, cohortsize=2, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
CFO.simu.fn(0.33, p, prelim=0, ncohort=33, cohortsize=2, init.level.A=1, init.level.B=1, add.args=add.args, seed=2)
CFO.simu.fn(0.33, p, prelim=0, ncohort=33, cohortsize=2, init.level.A=1, init.level.B=1, add.args=add.args, seed=3)
CFO.simu.fn(0.33, p, prelim=0, ncohort=33, cohortsize=2, init.level.A=1, init.level.B=1, add.args=add.args, seed=4)
CFO.simu.fn(0.33, p, prelim=0, ncohort=22, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=4)
CFO.simu.fn(0.33, p, prelim=0, ncohort=22, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=3)
CFO.simu.fn(0.33, p, prelim=0, ncohort=22, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=2)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
p <- list()
p[[1]] <- c(0.04, 0.05, 0.07, 0.10)
p[[2]] <- c(0.08, 0.10, 0.17, 0.22)
p[[3]] <- c(0.14, 0.19, 0.33, 0.55)
p[[4]] <- c(0.24, 0.33, 0.56, 0.77)
p <- rbind(p[[1]],p[[2]],p[[3]],p[[4]])
CFO.simu.fn(0.33, p, prelim=0, ncohort=30, cohortsize=2, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
d=data.frame(x=c(1,2,4,5,7,8,9), y=c(1,2,3,5,6,7,9))
ggplot() +
geom_step(data=d, mapping=aes(x=x, y=y)) +
geom_step(data=d, mapping=aes(x=x, y=y), direction="vh", linetype=3) +
geom_point(data=d, mapping=aes(x=x, y=y), color="red") +
opts(title="geom_step", plot.title=theme_text(size=40, vjust=1.5))
install.packages("ggplot2")
library(dfcomb)
source("2D_CFO_MTD.R")
library(ggplot2)
d=data.frame(x=c(1,2,4,5,7,8,9), y=c(1,2,3,5,6,7,9))
ggplot() +
geom_step(data=d, mapping=aes(x=x, y=y)) +
geom_step(data=d, mapping=aes(x=x, y=y), direction="vh", linetype=3) +
geom_point(data=d, mapping=aes(x=x, y=y), color="red") +
opts(title="geom_step", plot.title=theme_text(size=40, vjust=1.5))
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
14/60
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
tns
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)$est_p
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)$est_p
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=2)$est_p
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)$est_p
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
CFO.simu.fn(0.33, p, prelim=0, ncohort=20, cohortsize=3, init.level.A=1, init.level.B=1, add.args=add.args, seed=1)
