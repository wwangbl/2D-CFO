n.cores <- detectCores()
prior_a1 = c(0.1, 0.2, 0.3)
prior_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
prior_tox_a1 = c(0.2, 0.3, 0.4)
prior_tox_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
order <- c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15)
seeds <- 1:5000
add.args <- list(alp.prior=target, bet.prior=1-target)
p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])
p.trues.2 <- list()
p.trues.2[[1]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.trues.2[[2]] <- c(0.30, 0.45, 0.50, 0.60, 0.75)
p.trues.2[[3]] <- c(0.45, 0.55, 0.60, 0.70, 0.80)
p.true.2 <- rbind(p.trues.2[[1]],p.trues.2[[2]],p.trues.2[[3]])
p.trues.3 <- list()
p.trues.3[[1]] <- c(0.02, 0.07, 0.10, 0.15, 0.30)
p.trues.3[[2]] <- c(0.07, 0.10, 0.15, 0.30, 0.45)
p.trues.3[[3]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.true.3 <- rbind(p.trues.3[[1]],p.trues.3[[2]],p.trues.3[[3]])
p.trues.4 <- list()
p.trues.4[[1]] <- c(0.30, 0.45, 0.60, 0.70, 0.80)
p.trues.4[[2]] <- c(0.45, 0.55, 0.65, 0.75, 0.85)
p.trues.4[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.4 <- rbind(p.trues.4[[1]],p.trues.4[[2]],p.trues.4[[3]])
p.trues.5 <- list()
p.trues.5[[1]] <- c(0.01, 0.02, 0.08, 0.10, 0.11)
p.trues.5[[2]] <- c(0.03, 0.05, 0.10, 0.13, 0.15)
p.trues.5[[3]] <- c(0.07, 0.09, 0.12, 0.15, 0.30)
p.true.5 <- rbind(p.trues.5[[1]],p.trues.5[[2]],p.trues.5[[3]])
p.trues.6 <- list()
p.trues.6[[1]] <- c(0.05, 0.08, 0.10, 0.13, 0.15)
p.trues.6[[2]] <- c(0.09, 0.12, 0.15, 0.30, 0.45)
p.trues.6[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.6 <- rbind(p.trues.6[[1]],p.trues.6[[2]],p.trues.6[[3]])
p.trues.7 <- list()
p.trues.7[[1]] <- c(0.07, 0.10, 0.12, 0.15, 0.30)
p.trues.7[[2]] <- c(0.15, 0.30, 0.45, 0.52, 0.60)
p.trues.7[[3]] <- c(0.30, 0.50, 0.60, 0.65, 0.75)
p.true.7 <- rbind(p.trues.7[[1]],p.trues.7[[2]],p.trues.7[[3]])
p.trues.8 <- list()
p.trues.8[[1]] <- c(0.02, 0.10, 0.15, 0.50, 0.60)
p.trues.8[[2]] <- c(0.05, 0.12, 0.30, 0.55, 0.70)
p.trues.8[[3]] <- c(0.08, 0.15, 0.45, 0.60, 0.80)
p.true.8 <- rbind(p.trues.8[[1]],p.trues.8[[2]],p.trues.8[[3]])
p.trues.9 <- list()
p.trues.9[[1]] <- c(0.10, 0.12, 0.30, 0.40, 0.45)
p.trues.9[[2]] <- c(0.15, 0.30, 0.37, 0.43, 0.48)
p.trues.9[[3]] <- c(0.30, 0.37, 0.42, 0.47, 0.52)
p.true.9 <- rbind(p.trues.9[[1]],p.trues.9[[2]],p.trues.9[[3]])
p.trues.10 <- list()
p.trues.10[[1]] <- c(0.01, 0.03, 0.06, 0.08, 0.10)
p.trues.10[[2]] <- c(0.04, 0.07, 0.12, 0.16, 0.30)
p.trues.10[[3]] <- c(0.08, 0.10, 0.15, 0.30, 0.50)
p.true.10 <- rbind(p.trues.10[[1]],p.trues.10[[2]],p.trues.10[[3]])
p.trues.11 <- list()
p.trues.11[[1]] <- c(0.06, 0.10, 0.15, 0.30, 0.50)
p.trues.11[[2]] <- c(0.10, 0.30, 0.50, 0.70, 0.80)
p.trues.11[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.11 <- rbind(p.trues.11[[1]],p.trues.11[[2]],p.trues.11[[3]])
p.trues.12 <- list()
p.trues.12[[1]] <- c(0.05, 0.12, 0.20, 0.30, 0.40)
p.trues.12[[2]] <- c(0.10, 0.20, 0.30, 0.40, 0.50)
p.trues.12[[3]] <- c(0.30, 0.42, 0.52, 0.62, 0.70)
p.true.12 <- rbind(p.trues.12[[1]],p.trues.12[[2]],p.trues.12[[3]])
p.trues.13 <- list()
p.trues.13[[1]] <- c(0.12, 0.20, 0.30, 0.40, 0.60)
p.trues.13[[2]] <- c(0.20, 0.30, 0.40, 0.50, 0.67)
p.trues.13[[3]] <- c(0.42, 0.52, 0.62, 0.70, 0.80)
p.true.13 <- rbind(p.trues.13[[1]],p.trues.13[[2]],p.trues.13[[3]])
p.trues.14 <- list()
p.trues.14[[1]] <- c(0.04, 0.06, 0.08, 0.20, 0.30)
p.trues.14[[2]] <- c(0.10, 0.20, 0.30, 0.50, 0.67)
p.trues.14[[3]] <- c(0.30, 0.42, 0.52, 0.70, 0.80)
p.true.14 <- rbind(p.trues.14[[1]],p.trues.14[[2]],p.trues.14[[3]])
CFO.simu.fn(target, p.true.1, ncohort, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=1)
CFO.simu.fn(target, p.true.1, ncohort, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=2)
CFO.simu.fn(target, p.true.1, ncohort, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=3)
CFO.simu.fn(target, p.true.1, ncohort, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=4)
CFO.simu.fn(target, p.true.1, 50, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=4)
CFO.simu.fn(target, p.true.1, 40, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=4)
CFO.simu.fn(target, p.true.1, 30, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=4)
CFO.simu.fn(target, p.true.1, 40, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=4)
matrix(1:15,3,5)
samples <- as.list(numeric(3^5))
samples[1,1] <- 1:9
samples <- as.list(numeric(3^5))
samples[[1,1]] <- 1:9
samples <- as.list(numeric(2^2))
samples[[1,1]] <- 1:9
samples <- as.list(numeric(2*2))
samples[[1,1]] <- 1:9
samples <- as.list(numeric(2*2))
samples[[1,1]] <- 1:4
foo <- as.list(numeric(2*2))
dim(foo) <- c(2,2)
# Assignment per element:
foo[[1,1]] <- 1:4
foo[[1,2]] <- 1:10
foo[[2,1]] <- "foo"
foo[[2,2]] <- list(foo)
foo
foo <- as.list(numeric(3*5))
dim(foo) <- c(3,5)
# Assignment per element:
foo[[1,1]] <- 1:4
foo[[1,2]] <- 1:10
foo[[2,1]] <- "foo"
foo[[2,2]] <- list(foo)
foo
foo[[3,1]]
foo[[3,1]] <- c(foo[[3,1]],1)
foo[[3,1]]
foo[[3,1]] <- c(foo[[3,1]],2)
foo[[3,1]]
Beta(1,2)
rbeta(1,1,1)
rbeta(1,1,1)
rbeta(1,1,1)
rbeta(1,1,1)
rbeta(1,1,1)
rbeta(1,1,1)
rbeta(1,1,1)
a <- 1:9
a
a[3<a<6]
a[a>3 & a<6]
foo[[1,2]][3]
sampling <- function(phi, ndose.A, ndose.B, tys, tns, n, lower, upper){
samples <- as.list(numeric(ndose.A*ndose.B))
dim(samples) <- c(ndose.A,ndose.B)
for (i in 1:ndose.A) {
for (j in 1:ndose.B) {
nsamples <- 0
if (i==1 & j==1){
next
} else {
if (i==1){
while (nsamples<n) {
pl <- rbeta(1,phi+tys[i,j-1],1-phi+tns[i,j-1]-tys[i,j-1])
pc <- rbeta(1,phi+tys[i,j],1-phi+tns[i,j]-tys[i,j])
if (pl<pc){
samples[[i,j-1]] <- c(samples[[i,j-1]],pl)
samples[[i,j]] <- c(samples[[i,j]],pc)
nsamples <- nsamples + 1
}
}
} else if (j==1){
while (nsamples<n) {
pd <- rbeta(1,phi+tys[i-1,j],1-phi+tns[i-1,j]-tys[i-1,j])
pc <- rbeta(1,phi+tys[i,j],1-phi+tns[i,j]-tys[i,j])
if (pd<pc){
samples[[i-1,j]] <- c(samples[[i-1,j]],pd)
samples[[i,j]] <- c(samples[[i,j]],pc)
nsamples <- nsamples + 1
}
}
} else {
while (nsamples<n) {
pl <- rbeta(1,phi+tys[i,j-1],1-phi+tns[i,j-1]-tys[i,j-1])
pd <- rbeta(1,phi+tys[i-1,j],1-phi+tns[i-1,j]-tys[i-1,j])
pc <- rbeta(1,phi+tys[i,j],1-phi+tns[i,j]-tys[i,j])
if (pl<pc & pd<pc){
samples[[i,j-1]] <- c(samples[[i,j-1]],pl)
samples[[i-1,j]] <- c(samples[[i-1,j]],pd)
samples[[i,j]] <- c(samples[[i,j]],pc)
nsamples <- nsamples + 1
}
}
}
}
}
}
p <- matrix(0,ndose.A,ndose.B)
for (i in 1:ndose.A) {
for (j in 1:ndose.B) {
p[i,j] <- length(samples[[i,j]][samples[[i,j]]>lower & samples[[i,j]]<upper])/length(samples[[i,j]])
}
}
return(p)
}
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
source("2D_CFO_MTD.R")
source("pocrm.R")
library(parallel)
target <- 0.30
ncohort <- 20
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
n.cores <- detectCores()
prior_a1 = c(0.1, 0.2, 0.3)
prior_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
prior_tox_a1 = c(0.2, 0.3, 0.4)
prior_tox_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
order <- c(1,2,4,3,5,7,6,8,10,9,11,13,12,14,15)
seeds <- 1:5000
add.args <- list(alp.prior=target, bet.prior=1-target)
p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])
p.trues.2 <- list()
p.trues.2[[1]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.trues.2[[2]] <- c(0.30, 0.45, 0.50, 0.60, 0.75)
p.trues.2[[3]] <- c(0.45, 0.55, 0.60, 0.70, 0.80)
p.true.2 <- rbind(p.trues.2[[1]],p.trues.2[[2]],p.trues.2[[3]])
p.trues.3 <- list()
p.trues.3[[1]] <- c(0.02, 0.07, 0.10, 0.15, 0.30)
p.trues.3[[2]] <- c(0.07, 0.10, 0.15, 0.30, 0.45)
p.trues.3[[3]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.true.3 <- rbind(p.trues.3[[1]],p.trues.3[[2]],p.trues.3[[3]])
p.trues.4 <- list()
p.trues.4[[1]] <- c(0.30, 0.45, 0.60, 0.70, 0.80)
p.trues.4[[2]] <- c(0.45, 0.55, 0.65, 0.75, 0.85)
p.trues.4[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.4 <- rbind(p.trues.4[[1]],p.trues.4[[2]],p.trues.4[[3]])
p.trues.5 <- list()
p.trues.5[[1]] <- c(0.01, 0.02, 0.08, 0.10, 0.11)
p.trues.5[[2]] <- c(0.03, 0.05, 0.10, 0.13, 0.15)
p.trues.5[[3]] <- c(0.07, 0.09, 0.12, 0.15, 0.30)
p.true.5 <- rbind(p.trues.5[[1]],p.trues.5[[2]],p.trues.5[[3]])
p.trues.6 <- list()
p.trues.6[[1]] <- c(0.05, 0.08, 0.10, 0.13, 0.15)
p.trues.6[[2]] <- c(0.09, 0.12, 0.15, 0.30, 0.45)
p.trues.6[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.6 <- rbind(p.trues.6[[1]],p.trues.6[[2]],p.trues.6[[3]])
p.trues.7 <- list()
p.trues.7[[1]] <- c(0.07, 0.10, 0.12, 0.15, 0.30)
p.trues.7[[2]] <- c(0.15, 0.30, 0.45, 0.52, 0.60)
p.trues.7[[3]] <- c(0.30, 0.50, 0.60, 0.65, 0.75)
p.true.7 <- rbind(p.trues.7[[1]],p.trues.7[[2]],p.trues.7[[3]])
p.trues.8 <- list()
p.trues.8[[1]] <- c(0.02, 0.10, 0.15, 0.50, 0.60)
p.trues.8[[2]] <- c(0.05, 0.12, 0.30, 0.55, 0.70)
p.trues.8[[3]] <- c(0.08, 0.15, 0.45, 0.60, 0.80)
p.true.8 <- rbind(p.trues.8[[1]],p.trues.8[[2]],p.trues.8[[3]])
p.trues.9 <- list()
p.trues.9[[1]] <- c(0.10, 0.12, 0.30, 0.40, 0.45)
p.trues.9[[2]] <- c(0.15, 0.30, 0.37, 0.43, 0.48)
p.trues.9[[3]] <- c(0.30, 0.37, 0.42, 0.47, 0.52)
p.true.9 <- rbind(p.trues.9[[1]],p.trues.9[[2]],p.trues.9[[3]])
p.trues.10 <- list()
p.trues.10[[1]] <- c(0.01, 0.03, 0.06, 0.08, 0.10)
p.trues.10[[2]] <- c(0.04, 0.07, 0.12, 0.16, 0.30)
p.trues.10[[3]] <- c(0.08, 0.10, 0.15, 0.30, 0.50)
p.true.10 <- rbind(p.trues.10[[1]],p.trues.10[[2]],p.trues.10[[3]])
p.trues.11 <- list()
p.trues.11[[1]] <- c(0.06, 0.10, 0.15, 0.30, 0.50)
p.trues.11[[2]] <- c(0.10, 0.30, 0.50, 0.70, 0.80)
p.trues.11[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.11 <- rbind(p.trues.11[[1]],p.trues.11[[2]],p.trues.11[[3]])
p.trues.12 <- list()
p.trues.12[[1]] <- c(0.05, 0.12, 0.20, 0.30, 0.40)
p.trues.12[[2]] <- c(0.10, 0.20, 0.30, 0.40, 0.50)
p.trues.12[[3]] <- c(0.30, 0.42, 0.52, 0.62, 0.70)
p.true.12 <- rbind(p.trues.12[[1]],p.trues.12[[2]],p.trues.12[[3]])
p.trues.13 <- list()
p.trues.13[[1]] <- c(0.12, 0.20, 0.30, 0.40, 0.60)
p.trues.13[[2]] <- c(0.20, 0.30, 0.40, 0.50, 0.67)
p.trues.13[[3]] <- c(0.42, 0.52, 0.62, 0.70, 0.80)
p.true.13 <- rbind(p.trues.13[[1]],p.trues.13[[2]],p.trues.13[[3]])
p.trues.14 <- list()
p.trues.14[[1]] <- c(0.04, 0.06, 0.08, 0.20, 0.30)
p.trues.14[[2]] <- c(0.10, 0.20, 0.30, 0.50, 0.67)
p.trues.14[[3]] <- c(0.30, 0.42, 0.52, 0.70, 0.80)
p.true.14 <- rbind(p.trues.14[[1]],p.trues.14[[2]],p.trues.14[[3]])
CFO.simu.fn(target, p.true.1, 20, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=1)
CFO.simu.fn(target, p.true.1, 20, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=2)
res <- CFO.simu.fn(target, p.true.1, 20, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=2)
res <- CFO.simu.fn(target, p.true.1, 20, cohortsize, init.level.A, init.level.B, add.args=add.args, seed=2)
tns <- res$dose.ns
tys <- res$DLT.ns
tns <- res$dose.ns
tys
tns
tys
sampling(0.3, 3, 5, tys, tns, 500, 0.2, 0.4)
res
sampling(0.3, 3, 5, tys, tns, 1000, 0.2, 0.4)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
samples <- as.list(numeric(5))
samples
x <- matrix(1:9,3,3)
x
l <- c(1,1,1)
x[1,] <- x[1,]+l
x
all(diff(l) >= 0)
l <- c(2,1,3)
all(diff(l) >= 0)
d1.sampling <- function(phi, ndose, tys, tns, n, lower, upper){
samples <- as.list(numeric(ndose))
nsamples <- 0
while (nsamples<n) {
s <- replicate(ndose, 0)
for (i in 1:ndose) {
s[i] <- rbeta(1,phi+tys[i],1-phi+tns[i]-tys[i])
}
if (all(diff(s) >= 0)){
for (j in 1:ndose) {
samples[[j]] <- c(samples[[j]],s[j])
}
nsamples <- nsamples + 1
} else {
next
}
}
}
d1.sampling <- function(phi, ndose, tys, tns, n, lower, upper){
samples <- as.list(numeric(ndose))
p <- replicate(ndose, 0)
nsamples <- 0
while (nsamples<n) {
s <- replicate(ndose, 0)
for (i in 1:ndose) {
s[i] <- rbeta(1,phi+tys[i],1-phi+tns[i]-tys[i])
}
if (all(diff(s) >= 0)){
for (j in 1:ndose) {
samples[[j]] <- c(samples[[j]],s[j])
}
nsamples <- nsamples + 1
} else {
next
}
}
for (k in 1:ndose) {
p[k] <- length(samples[[k]][samples[[k]]>lower & samples[[k]]<upper])/length(samples[[k]])
}
return(p)
}
line.sampling <- function(phi, ndose, tys, tns, n, lower, upper){
samples <- as.list(numeric(ndose))
p <- replicate(ndose, 0)
nsamples <- 0
while (nsamples<n) {
s <- replicate(ndose, 0)
for (i in 1:ndose) {
s[i] <- rbeta(1,phi+tys[i],1-phi+tns[i]-tys[i])
}
if (all(diff(s) >= 0)){
for (j in 1:ndose) {
samples[[j]] <- c(samples[[j]],s[j])
}
nsamples <- nsamples + 1
} else {
next
}
}
for (k in 1:ndose) {
p[k] <- length(samples[[k]][samples[[k]]>lower & samples[[k]]<upper])/length(samples[[k]])
}
return(p)
}
CFO.next <- function(phi, tns, tys, cur){
}
ensemble <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, add.args=list(), seed=NULL){
# phi: Target DIL rate
# p.true: True DIL rates under the different dose levels
# ncohort: The number of cohorts
# cohortsize: The sample size in each cohort
# alp.prior, bet.prior: prior parameters
set.seed(seed)
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B
tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
for (i in 1:ncohort){
pc <- p.true[cidx.A, cidx.B]
# sample from current dose
cres <- rbinom(cohortsize, 1, pc)
# update results
tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
cy <- tys[cidx.A, cidx.B]
cn <- tns[cidx.A, cidx.B]
add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
} else if (cidx.A==ndose.A & cidx.B!=ndose.B){
# (nA, 2:(nB-1))
cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
} else if (cidx.A!=ndose.A & cidx.B==ndose.B){
# (2:(nA-1), nB)
cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
} else {
message('no such case')
}
###################
idx.chg.CFO <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
idx.chg.BOIN <- next.comb(phi, tns, tys, c(cidx.A, cidx.B), n.earlystop=100, p.saf=0.6*phi, p.tox=1.4*phi,
cutoff.eli=0.95, extrasafe=FALSE, offset=0.05) - c(cidx.A, cidx.B)
idx.chg.dfcomb <- CombIncrease_next(ndose.A, ndose.B, phi, target_min=0.2, target_max=0.4, prior_tox_a1, prior_tox_a2, cohortsize,
final=FALSE, pat_incl=18, dose_adm1=dose1, dose_adm2=dose2, toxicity=toxicity1, c_over=1,
cmin_overunder=3, cmin_recom=1, early_stop=1, alloc_rule=1) - c(cidx.A, cidx.B)
idx.chg.pocrm <-
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
correct <- 0
if(MTD[1]>ndose.A | MTD[2]>ndose.B){
correct <- 0
} else if (p.true[MTD[1],MTD[2]]==phi){
correct <- 1
}
npercent <- 0
for (j in 1:ndose.A) {
for (k in 1:ndose.B) {
if (p.true[j,k]==phi){
npercent <- npercent + tns[j,k]
}
}
}
npercent <- percent(npercent/(ncohort*cohortsize))
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses, correct=correct, npercent=npercent, ntox=sum(tys))
}
library(dfcomb)
prior_a1 = c(0.12, 0.2, 0.3, 0.4, 0.5)
prior_a2 = c(0.2, 0.3, 0.4)
toxicity1 = c(0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1)
dose1 = c(1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4)
dose2 = c(1,1,1,2,2,2,3,3,3,2,2,2,1,1,1,1,1,1)
t_tox = c(rep(+Inf,8),2.9,+Inf,4.6,+Inf,+Inf,+Inf,+Inf,+Inf,+Inf,5.2)
follow = c(rep(6,15), 4.9, 3.1, 1.3)
next1 = CombIncrease_next(ndose_a1=5, ndose_a2=3, target=0.3,
target_min=0.2, target_max=0.4, prior_tox_a1=prior_a1,
prior_tox_a2=prior_a2, cohort=3, final=FALSE, pat_incl=18,
dose_adm1=dose1, dose_adm2=dose2, toxicity=toxicity1, c_over=1,
cmin_overunder=3, cmin_recom=1, early_stop=1, alloc_rule=1)
next1
library(pocrm)
#All specifications refer to example in Wages, Conaway and O'Quigley (2011).
#Specify the possible orderings from Table 2
orders<-matrix(nrow=8,ncol=8)
orders[1,]<-c(1,2,3,4,5,6,7,8)
orders[2,]<-c(1,3,2,4,5,6,7,8)
orders[3,]<-c(1,2,3,5,4,6,7,8)
orders[4,]<-c(1,2,3,4,5,7,6,8)
orders[5,]<-c(1,3,2,5,4,6,7,8)
orders[6,]<-c(1,3,2,4,5,7,6,8)
orders[7,]<-c(1,2,3,5,4,7,6,8)
orders[8,]<-c(1,3,2,5,4,7,6,8)
#Specify the skeleton values provided in Table 4.
skeleton<-c(0.01,0.03,0.10,0.20,0.33,0.47,0.60,0.70)
#Initial guesses of toxicity probabilities for each ordering.
alpha<-getwm(orders,skeleton)
#We consider all orders to be equally likely prior to the study.
prior.o<-rep(1/8,8)
#The target toxicity rate
theta<-0.20
#Combinations tried on the first 11 patients in Table 5.
combos<-c(2,3,5,4,7,5,4,3,2,2,3)
#Toxicity outcomes on the first 11 patients in Table 5.
y<-c(0,0,0,0,1,1,1,0,0,1,1)
fit<-pocrm.imp(alpha,prior.o,theta,y,combos)
fit
orders
