}
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
} else if (cidx.A==ndose.A & cidx.B!=ndose.B){
# (nA, 2:(nB-1))
cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
} else if (cidx.A!=ndose.A & cidx.B==ndose.B){
# (2:(nA-1), nB)
cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
} else {
message('no such case')
}
# message(paste('cys[2,]: ', cys[2,1],cys[2,2],cys[2,3]))
# message(paste('cns[2,]: ', cns[2,1],cns[2,2],cns[2,3]))
# message(paste('cys[,2]: ', cys[1,2],cys[2,2],cys[3,2]))
# message(paste('cns[,2]: ', cns[1,2],cns[2,2],cns[3,2]))
idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses)
}
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
res <- CFO.simu.fn(target, p.true.4, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
# Simulation function for CFO
CFO.simu.fn <- function(phi, p.true, ncohort=12, init.level.A=1, init.level.B=1,
cohortsize=1, add.args=list()){
# phi: Target DIL rate
# p.true: True DIL rates under the different dose levels
# ncohort: The number of cohorts
# cohortsize: The sample size in each cohort
# alp.prior, bet.prior: prior parameters
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B
tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
for (i in 1:ncohort){
# message(paste(i, '-th step:'))
# message(paste('cidx (A,B): (', cidx.A, ',', cidx.B, ')'))
pc <- p.true[cidx.A, cidx.B]
# sample from current dose
cres <- rbinom(cohortsize, 1, pc)
# update results
tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
cy <- tys[cidx.A, cidx.B]
cn <- tns[cidx.A, cidx.B]
add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
# quick escalation
if (sum(tys)==0){
if (cidx.A == ndose.A & cidx.B != ndose.B){
cidx.B <- cidx.B +1
} else if (cidx.A != ndose.A & cidx.B == ndose.B){
cidx.A <- cidx.A +1
} else if (cidx.A != ndose.A & cidx.B != ndose.B){
rand <- rbinom(1,1,0.5)
if(rand == 0){
cidx.A <- cidx.A + 1
} else {
cidx.B <- cidx.B + 1
}
} else {
next
}
next
}
if (overdose.fn(phi, add.args)){
tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1
}
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
} else if (cidx.A==ndose.A & cidx.B!=ndose.B){
# (nA, 2:(nB-1))
cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
} else if (cidx.A!=ndose.A & cidx.B==ndose.B){
# (2:(nA-1), nB)
cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
} else {
message('no such case')
}
# message(paste('cys[2,]: ', cys[2,1],cys[2,2],cys[2,3]))
# message(paste('cns[2,]: ', cns[2,1],cns[2,2],cns[2,3]))
# message(paste('cys[,2]: ', cys[1,2],cys[2,2],cys[3,2]))
# message(paste('cns[,2]: ', cns[1,2],cns[2,2],cns[3,2]))
idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses)
}
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
n.MTD <- 0
n.patient <- 0
n.DLT <- 0
for (i in 1:1000){
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
n.patient <- n.patient + res$dose.ns[3,2] + res$dose.ns[2,3] + res$dose.ns[1,4]
n.DLT <- n.DLT + sum(res$DLT.ns)
if (res$MTD[1]==99 | res$MTD[2]==99){
next
}
if (p.true.1[res$MTD[1],res$MTD[2]] == target){
n.MTD <- n.MTD + 1
}
if (i%%100==0){
message(i)
}
}
cat('scenario 1', '\n')
cat('MTD selection rate: ', n.MTD/1000, '\n')
cat('% of patients at the MTD: ', n.patient/(1000*60), '\n')
cat('average number of DLTs: ', n.DLT/1000)
percent(0.1)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
percent(0.1)
CFO.getoc.fn <- function(phi, p.true, ncohort=12, init.level.A=1, init.level.B=1, cohortsize=1, add.args=list(), n.itera){
n.MTD <- 0
n.patient <- 0
n.DLT <- 0
for (i in 1:1000){
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
n.patient <- n.patient + res$dose.ns[3,2] + res$dose.ns[2,3] + res$dose.ns[1,4]
n.DLT <- n.DLT + sum(res$DLT.ns)
if (res$MTD[1]==99 | res$MTD[2]==99){
next
}
if (p.true.1[res$MTD[1],res$MTD[2]] == target){
n.MTD <- n.MTD + 1
}
# if (i%%100==0){
#   message(i)
# }
}
list(pcs = percent(n.MTD/n.itera), npercent = percent(n.patient/(n.itera*ncohort*cohortsize)), totaltox = n.DLT)
}
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
source("2D_CFO_MTD.R")
target <- 0.30
ncohort <- 20
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
add.args <- list(alp.prior=target, bet.prior=1-target)
p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])
p.trues.2 <- list()
p.trues.2[[1]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.trues.2[[2]] <- c(0.30, 0.45, 0.50, 0.60, 0.75)
p.trues.2[[3]] <- c(0.45, 0.55, 0.60, 0.70, 0.80)
p.true.2 <- rbind(p.trues.2[[1]],p.trues.2[[2]],p.trues.2[[3]])
p.trues.3 <- list()
p.trues.3[[1]] <- c(0.02, 0.07, 0.10, 0.15, 0.30)
p.trues.3[[2]] <- c(0.7, 0.10, 0.15, 0.30, 0.45)
p.trues.3[[3]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.true.3 <- rbind(p.trues.3[[1]],p.trues.3[[2]],p.trues.3[[3]])
p.trues.4 <- list()
p.trues.4[[1]] <- c(0.30, 0.45, 0.60, 0.70, 0.80)
p.trues.4[[2]] <- c(0.45, 0.55, 0.65, 0.75, 0.85)
p.trues.4[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.4 <- rbind(p.trues.4[[1]],p.trues.4[[2]],p.trues.4[[3]])
p.trues.5 <- list()
p.trues.5[[1]] <- c(0.01, 0.02, 0.08, 0.13, 0.15)
p.trues.5[[2]] <- c(0.03, 0.05, 0.10, 0.13, 0.15)
p.trues.5[[3]] <- c(0.07, 0.09, 0.12, 0.15, 0.30)
p.true.5 <- rbind(p.trues.5[[1]],p.trues.5[[2]],p.trues.5[[3]])
p.trues.6 <- list()
p.trues.6[[1]] <- c(0.05, 0.08, 0.10, 0.13, 0.15)
p.trues.6[[2]] <- c(0.09, 0.12, 0.15, 0.30, 0.45)
p.trues.6[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.6 <- rbind(p.trues.6[[1]],p.trues.6[[2]],p.trues.6[[3]])
p.trues.7 <- list()
p.trues.7[[1]] <- c(0.07, 0.10, 0.12, 0.15, 0.30)
p.trues.7[[2]] <- c(0.15, 0.30, 0.45, 0.52, 0.60)
p.trues.7[[3]] <- c(0.30, 0.50, 0.60, 0.65, 0.75)
p.true.7 <- rbind(p.trues.7[[1]],p.trues.7[[2]],p.trues.7[[3]])
p.trues.8 <- list()
p.trues.8[[1]] <- c(0.02, 0.10, 0.15, 0.50, 0.60)
p.trues.8[[2]] <- c(0.05, 0.12, 0.30, 0.55, 0.70)
p.trues.8[[3]] <- c(0.08, 0.15, 0.45, 0.60, 0.80)
p.true.8 <- rbind(p.trues.8[[1]],p.trues.8[[2]],p.trues.8[[3]])
p.trues.9 <- list()
p.trues.9[[1]] <- c(0.005, 0.01, 0.02, 0.04, 0.07)
p.trues.9[[2]] <- c(0.02, 0.05, 0.08, 0.12, 0.15)
p.trues.9[[3]] <- c(0.15, 0.30, 0.45, 0.55, 0.65)
p.true.9 <- rbind(p.trues.9[[1]],p.trues.9[[2]],p.trues.9[[3]])
p.trues.10 <- list()
p.trues.10[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.10[[2]] <- c(0.45, 0.50, 0.60, 0.65, 0.70)
p.trues.10[[3]] <- c(0.70, 0.75, 0.80, 0.85, 0.90)
p.true.10 <- rbind(p.trues.10[[1]],p.trues.10[[2]],p.trues.10[[3]])
res <- CFO.simu.fn(target, p.true.4, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
# Simulation function for CFO
CFO.simu.fn <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, add.args=list()){
# phi: Target DIL rate
# p.true: True DIL rates under the different dose levels
# ncohort: The number of cohorts
# cohortsize: The sample size in each cohort
# alp.prior, bet.prior: prior parameters
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B
tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
for (i in 1:ncohort){
# message(paste(i, '-th step:'))
# message(paste('cidx (A,B): (', cidx.A, ',', cidx.B, ')'))
pc <- p.true[cidx.A, cidx.B]
# sample from current dose
cres <- rbinom(cohortsize, 1, pc)
# update results
tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
cy <- tys[cidx.A, cidx.B]
cn <- tns[cidx.A, cidx.B]
add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
# quick escalation
if (sum(tys)==0){
if (cidx.A == ndose.A & cidx.B != ndose.B){
cidx.B <- cidx.B +1
} else if (cidx.A != ndose.A & cidx.B == ndose.B){
cidx.A <- cidx.A +1
} else if (cidx.A != ndose.A & cidx.B != ndose.B){
rand <- rbinom(1,1,0.5)
if(rand == 0){
cidx.A <- cidx.A + 1
} else {
cidx.B <- cidx.B + 1
}
} else {
next
}
next
}
if (overdose.fn(phi, add.args)){
tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1
}
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
} else if (cidx.A==ndose.A & cidx.B!=ndose.B){
# (nA, 2:(nB-1))
cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
} else if (cidx.A!=ndose.A & cidx.B==ndose.B){
# (2:(nA-1), nB)
cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
} else {
message('no such case')
}
# message(paste('cys[2,]: ', cys[2,1],cys[2,2],cys[2,3]))
# message(paste('cns[2,]: ', cns[2,1],cns[2,2],cns[2,3]))
# message(paste('cys[,2]: ', cys[1,2],cys[2,2],cys[3,2]))
# message(paste('cns[,2]: ', cns[1,2],cns[2,2],cns[3,2]))
idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses)
}
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
simu <- CFO.getoc.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args, n.itera=100)
CFO.getoc.fn <- function(phi, p.true, ncohort=12, init.level.A=1, init.level.B=1, cohortsize=1, add.args=list(), n.itera){
n.MTD <- 0
n.patient <- 0
n.DLT <- 0
for (i in 1:n.itera){
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
n.patient <- n.patient + res$dose.ns[3,2] + res$dose.ns[2,3] + res$dose.ns[1,4]
n.DLT <- n.DLT + sum(res$DLT.ns)
if (res$MTD[1]==99 | res$MTD[2]==99){
next
}
if (p.true.1[res$MTD[1],res$MTD[2]] == target){
n.MTD <- n.MTD + 1
}
# if (i%%100==0){
#   message(i)
# }
}
list(pcs = percent(n.MTD/n.itera), npercent = percent(n.patient/(n.itera*ncohort*cohortsize)), totaltox = n.DLT)
}
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_MTD.R", echo=TRUE)
simu <- CFO.getoc.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args, n.itera=100)
simu <- CFO.getoc.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args, n.itera=100)
simu
CFO.getoc.fn <- function(phi, p.true, ncohort=12, init.level.A=1, init.level.B=1, cohortsize=1, add.args=list(), n.itera){
n.MTD <- 0
n.patient <- 0
n.DLT <- 0
for (i in 1:n.itera){
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
n.patient <- n.patient + res$dose.ns[3,2] + res$dose.ns[2,3] + res$dose.ns[1,4]
n.DLT <- n.DLT + sum(res$DLT.ns)
if (res$MTD[1]==99 | res$MTD[2]==99){
next
}
if (p.true.1[res$MTD[1],res$MTD[2]] == target){
n.MTD <- n.MTD + 1
}
# if (i%%100==0){
#   message(i)
# }
}
list(pcs = percent(n.MTD/n.itera), npercent = percent(n.patient/(n.itera*ncohort*cohortsize)), totaltox = n.DLT/n.itera)
}
install.packages("parallel")
r version
install.packages("parallel")
install.packages("MASS")
knitr::opts_chunk$set(echo = TRUE)
library(parallel)
library(MASS)
starts <- rep(100, 40)
fx <- function(nstart) kmeans(Boston, 4, nstart=nstart)
numCores <- detectCores()
numCores
