p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=0.1, p.min=0.1, p.max=0.9, add.args=add.args)
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1)$value
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
# Simulation function for CFO
CFO.simu.fn <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, n0=0.1, p.min=0.1, p.max=0.6, add.args=list(), seed=NULL){
# phi: Target DIL rate
# p.true: True DIL rates under the different dose levels
# ncohort: The number of cohorts
# cohortsize: The sample size in each cohort
# alp.prior, bet.prior: prior parameters
set.seed(seed)
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B
priors <- set.priors(n0, ndose.A, ndose.B, p.min, p.max)
tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
for (i in 1:ncohort){
# message(paste(i, '-th step:'))
# message(paste('cidx (A,B): (', cidx.A, ',', cidx.B, ')'))
pc <- p.true[cidx.A, cidx.B]
# sample from current dose
cres <- rbinom(cohortsize, 1, pc)
# update results
tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
cy <- tys[cidx.A, cidx.B]
cn <- tns[cidx.A, cidx.B]
add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B, alp.prior=priors[cidx.A,cidx.B,1], bet.prior=priors[cidx.A,cidx.B,2]), add.args)
# quick escalation
if (sum(tys)==0){
if (cidx.A == ndose.A & cidx.B != ndose.B){
cidx.B <- cidx.B +1
} else if (cidx.A != ndose.A & cidx.B == ndose.B){
cidx.A <- cidx.A +1
} else if (cidx.A != ndose.A & cidx.B != ndose.B){
rand <- rbinom(1,1,0.5)
if(rand == 0){
cidx.A <- cidx.A + 1
} else {
cidx.B <- cidx.B + 1
}
} else {
next
}
next
}
# if (overdose.fn(phi, add.args)){
#   tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1
# }
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
} else if (cidx.A==ndose.A & cidx.B!=ndose.B){
# (nA, 2:(nB-1))
cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
} else if (cidx.A!=ndose.A & cidx.B==ndose.B){
# (2:(nA-1), nB)
cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
} else {
message('no such case')
}
idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
correct <- 0
if(MTD[1]>ndose.A | MTD[2]>ndose.B){
correct <- 0
} else if (p.true[MTD[1],MTD[2]]==phi){
correct <- 1
}
npercent <- 0
for (j in 1:ndose.A) {
for (k in 1:ndose.B) {
if (p.true[j,k]==phi){
npercent <- npercent + tns[j,k]
}
}
}
npercent <- percent(npercent/(ncohort*cohortsize))
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses, correct=correct, npercent=npercent, ntox=sum(tys))
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.9, add.args=add.args)
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args)
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 1)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 2)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 3)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 4)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, rel.tol = 1e-15)$value
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, rel.tol = 1e-30)$value
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
const.min <- integrate(fn.min, lower=0, upper=1, rel.tol = 1e-50)$value
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, rel.tol = 1e-50)$value
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1)$value
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1)$value
message(const.min)
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 4)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.8, add.args=add.args, seed = 6)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=2, p.min=0.1, p.max=0.8, add.args=add.args, seed = 5)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=10, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, stop.on.error = FALSE)$value
const.max <- integrate(fn.max, lower=0, upper=1)$value
p1 <- integrate(fn.min, lower=0, upper=phi)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, stop.on.error = FALSE)$value
const.max <- integrate(fn.max, lower=0, upper=1, stop.on.error = FALSE)$value
p1 <- integrate(fn.min, lower=0, upper=phi, stop.on.error = FALSE)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi, stop.on.error = FALSE)$value/const.max
list(p1=p1, p2=p2)
}
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, stop.on.error = FALSE)$value
message(const.min)
const.max <- integrate(fn.max, lower=0, upper=1, stop.on.error = FALSE)$value
p1 <- integrate(fn.min, lower=0, upper=phi, stop.on.error = FALSE)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi, stop.on.error = FALSE)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
prob.int <- function(phi, y1, n1, y2, n2, alp.prior, bet.prior){
alp1 <- alp.prior + y1
alp2 <- alp.prior + y2
bet1 <- bet.prior + n1 - y1
bet2 <- bet.prior + n2 - y2
# message(paste('a1,b1,a2,b2: ',alp1, bet1, alp2, bet2))
fn.min <- function(x){
dbeta(x, alp1, bet1)*(1-pbeta(x, alp2, bet2))
}
fn.max <- function(x){
pbeta(x, alp1, bet1)*dbeta(x, alp2, bet2)
}
const.min <- integrate(fn.min, lower=0, upper=1, stop.on.error = FALSE)$value
const.max <- integrate(fn.max, lower=0, upper=1, stop.on.error = FALSE)$value
p1 <- integrate(fn.min, lower=0, upper=phi, stop.on.error = FALSE)$value/const.min
p2 <- integrate(fn.max, lower=0, upper=phi, stop.on.error = FALSE)$value/const.max
list(p1=p1, p2=p2)
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
# Simulation function for CFO
CFO.simu.fn <- function(phi, p.true, ncohort=12, cohortsize=1, init.level.A=1, init.level.B=1, n0=0.1, p.min=0.1, p.max=0.6, add.args=list(), seed=NULL){
# phi: Target DIL rate
# p.true: True DIL rates under the different dose levels
# ncohort: The number of cohorts
# cohortsize: The sample size in each cohort
# alp.prior, bet.prior: prior parameters
set.seed(seed)
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B
priors <- set.priors(n0, ndose.A, ndose.B, p.min, p.max)
tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
for (i in 1:ncohort){
# message(paste(i, '-th step:'))
# message(paste('cidx (A,B): (', cidx.A, ',', cidx.B, ')'))
pc <- p.true[cidx.A, cidx.B]
# sample from current dose
cres <- rbinom(cohortsize, 1, pc)
# update results
tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
cy <- tys[cidx.A, cidx.B]
cn <- tns[cidx.A, cidx.B]
add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B, alp.prior=priors[cidx.A,cidx.B,1], bet.prior=priors[cidx.A,cidx.B,2]), add.args)
# quick escalation
# if (sum(tys)==0){
#   if (cidx.A == ndose.A & cidx.B != ndose.B){
#     cidx.B <- cidx.B +1
#   } else if (cidx.A != ndose.A & cidx.B == ndose.B){
#     cidx.A <- cidx.A +1
#   } else if (cidx.A != ndose.A & cidx.B != ndose.B){
#     rand <- rbinom(1,1,0.5)
#     if(rand == 0){
#       cidx.A <- cidx.A + 1
#     } else {
#       cidx.B <- cidx.B + 1
#     }
#   } else {
#     next
#   }
#   next
# }
# if (overdose.fn(phi, add.args)){
#   tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1
# }
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
} else if (cidx.A==ndose.A & cidx.B!=ndose.B){
# (nA, 2:(nB-1))
cys <- rbind(tys[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cns <- rbind(tns[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
cover.doses <- rbind(tover.doses[(ndose.A-1):ndose.A, (cidx.B-1):(cidx.B+1)], c(NA,NA,NA))
} else if (cidx.A!=ndose.A & cidx.B==ndose.B){
# (2:(nA-1), nB)
cys <- cbind(tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cns <- cbind(tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
cover.doses <- cbind(tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):cidx.B], c(NA,NA,NA))
} else {
message('no such case')
}
idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
correct <- 0
if(MTD[1]>ndose.A | MTD[2]>ndose.B){
correct <- 0
} else if (p.true[MTD[1],MTD[2]]==phi){
correct <- 1
}
npercent <- 0
for (j in 1:ndose.A) {
for (k in 1:ndose.B) {
if (p.true[j,k]==phi){
npercent <- npercent + tns[j,k]
}
}
}
npercent <- percent(npercent/(ncohort*cohortsize))
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses, correct=correct, npercent=npercent, ntox=sum(tys))
}
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_prior.R", echo=TRUE)
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 5)
res
res <- CFO.simu.fn(target, p.true.10, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 1)
res
res <- CFO.simu.fn(target, p.true.1, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, n0=1, p.min=0.1, p.max=0.6, add.args=add.args, seed = 1)
res
