ps <- prob.int(phi, y1, n1, y2, n2, alp.prior1, bet.prior1, alp.prior2, bet.prior2)
if (type=="L"){
pC <- 1 - ps$p2
pL <- 1 - ps$p1
oddsC <- pC/(1-pC)
oddsL <- pL/(1-pL)
OR <- oddsC*oddsL
}else if (type=="R"){
pC <- 1 - ps$p1
pR <- 1 - ps$p2
oddsC <- pC/(1-pC)
oddsR <- pR/(1-pR)
# message(oddsC)
# message(oddsR)
OR <- (1/oddsC)/oddsR
}else if (type=="D"){
pC <- 1 - ps$p2
pD <- 1 - ps$p1
oddsC <- pC/(1-pC)
oddsD <- pD/(1-pD)
OR <- oddsC*oddsD
}else if (type=="U"){
pC <- 1 - ps$p1
pU <- 1 - ps$p2
oddsC <- pC/(1-pC)
oddsU <- pU/(1-pU)
OR <- (1/oddsC)/oddsU
}
return(OR)
}
source("2D_CFO_prior.R")
library(parallel)
target <- 0.30
ncohort <- 20
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
n.cores <- detectCores()
prior_a1 = c(0.1, 0.2, 0.3)
prior_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
prior_tox_a1 = c(0.2, 0.3, 0.4)
prior_tox_a2 = c(0.12, 0.2, 0.3, 0.4, 0.5)
seeds <- 1:5000
add.args <- list(alp.prior=target, bet.prior=1-target)
p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])
p.trues.2 <- list()
p.trues.2[[1]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.trues.2[[2]] <- c(0.30, 0.45, 0.50, 0.60, 0.75)
p.trues.2[[3]] <- c(0.45, 0.55, 0.60, 0.70, 0.80)
p.true.2 <- rbind(p.trues.2[[1]],p.trues.2[[2]],p.trues.2[[3]])
p.trues.3 <- list()
p.trues.3[[1]] <- c(0.02, 0.07, 0.10, 0.15, 0.30)
p.trues.3[[2]] <- c(0.7, 0.10, 0.15, 0.30, 0.45)
p.trues.3[[3]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.true.3 <- rbind(p.trues.3[[1]],p.trues.3[[2]],p.trues.3[[3]])
p.trues.4 <- list()
p.trues.4[[1]] <- c(0.30, 0.45, 0.60, 0.70, 0.80)
p.trues.4[[2]] <- c(0.45, 0.55, 0.65, 0.75, 0.85)
p.trues.4[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.4 <- rbind(p.trues.4[[1]],p.trues.4[[2]],p.trues.4[[3]])
p.trues.5 <- list()
p.trues.5[[1]] <- c(0.01, 0.02, 0.08, 0.13, 0.15)
p.trues.5[[2]] <- c(0.03, 0.05, 0.10, 0.13, 0.15)
p.trues.5[[3]] <- c(0.07, 0.09, 0.12, 0.15, 0.30)
p.true.5 <- rbind(p.trues.5[[1]],p.trues.5[[2]],p.trues.5[[3]])
p.trues.6 <- list()
p.trues.6[[1]] <- c(0.05, 0.08, 0.10, 0.13, 0.15)
p.trues.6[[2]] <- c(0.09, 0.12, 0.15, 0.30, 0.45)
p.trues.6[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.6 <- rbind(p.trues.6[[1]],p.trues.6[[2]],p.trues.6[[3]])
p.trues.7 <- list()
p.trues.7[[1]] <- c(0.07, 0.10, 0.12, 0.15, 0.30)
p.trues.7[[2]] <- c(0.15, 0.30, 0.45, 0.52, 0.60)
p.trues.7[[3]] <- c(0.30, 0.50, 0.60, 0.65, 0.75)
p.true.7 <- rbind(p.trues.7[[1]],p.trues.7[[2]],p.trues.7[[3]])
p.trues.8 <- list()
p.trues.8[[1]] <- c(0.02, 0.10, 0.15, 0.50, 0.60)
p.trues.8[[2]] <- c(0.05, 0.12, 0.30, 0.55, 0.70)
p.trues.8[[3]] <- c(0.08, 0.15, 0.45, 0.60, 0.80)
p.true.8 <- rbind(p.trues.8[[1]],p.trues.8[[2]],p.trues.8[[3]])
p.trues.9 <- list()
p.trues.9[[1]] <- c(0.005, 0.01, 0.02, 0.04, 0.07)
p.trues.9[[2]] <- c(0.02, 0.05, 0.08, 0.12, 0.15)
p.trues.9[[3]] <- c(0.15, 0.30, 0.45, 0.55, 0.65)
p.true.9 <- rbind(p.trues.9[[1]],p.trues.9[[2]],p.trues.9[[3]])
p.trues.10 <- list()
p.trues.10[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.10[[2]] <- c(0.45, 0.50, 0.60, 0.65, 0.70)
p.trues.10[[3]] <- c(0.70, 0.75, 0.80, 0.85, 0.90)
p.true.10 <- rbind(p.trues.10[[1]],p.trues.10[[2]],p.trues.10[[3]])
p.trues.11 <- list()
p.trues.11[[1]] <- c(0.05, 0.10, 0.15, 0.33, 0.45)
p.trues.11[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.11[[3]] <- c(0.15, 0.27, 0.45, 0.50, 0.60)
p.true.11 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])
p.trues.12 <- list()
p.trues.12[[1]] <- c(0.07, 0.10, 0.12, 0.15, 0.33)
p.trues.12[[2]] <- c(0.15, 0.30, 0.45, 0.52, 0.60)
p.trues.12[[3]] <- c(0.27, 0.50, 0.60, 0.65, 0.75)
p.true.12 <- rbind(p.trues.12[[1]],p.trues.12[[2]],p.trues.12[[3]])
res <- CFO.simu.fn(target, p.true.3, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args, seed = 2)
res
res <- CFO.simu.fn(target, p.true.3, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args, seed = 1)
res
make.decision.1dCFO.fn <- function(phi, cys, cns, cap, cbp, cover.doses, diag=FALSE){
message(cys[2], cns[2], cys[3], cns[3], cap[2], cbp[2], cap[3], cbp[3])
if (cover.doses[2] == 1){
return(1)
}else{
if (is.na(cys[1]) & (cover.doses[3]==1)){
return(2)
}else  if (is.na(cys[1]) & (!(cover.doses[3]==1))){
gam2 <- optim.gamma.fn(cns[2], cns[3], phi, "R", cap[2], cbp[2], cap[3], cbp[3])$gamma
# message(paste('gam2: ', gam2))
OR.v2 <- OR.values(phi, cys[2], cns[2], cys[3], cns[3], cap[2], cbp[2], cap[3], cbp[3], type="R")
# message(paste('OR.v2: ', OR.v2))
if (OR.v2>gam2){
return(3)
}else{
return(2)
}
}else  if (is.na(cys[3]) | (cover.doses[3]==1)){
gam1 <- optim.gamma.fn(cns[1], cns[2], phi, "L", cap[1], cbp[1], cap[2], cbp[2])$gamma
# message(paste('gam1: ', gam1))
OR.v1 <- OR.values(phi, cys[1], cns[1], cys[2], cns[2], cap[1], cbp[1], cap[2], cbp[2], type="L")
# message(paste('OR.v1: ', OR.v1))
if (OR.v1>gam1){
return(1)
}else{
return(2)
}
}else  if (!(is.na(cys[1]) | is.na(cys[3]) | cover.doses[3]==1)){
gam1 <- optim.gamma.fn(cns[1], cns[2], phi, "L", cap[1], cbp[1], cap[2], cbp[2])$gamma
gam2 <- optim.gamma.fn(cns[2], cns[3], phi, "R", cap[1], cbp[1], cap[2], cbp[2])$gamma
# message(paste('gam1,gam2: ',gam1,gam2))
OR.v1 <- OR.values(phi, cys[1], cns[1], cys[2], cns[2], cap[1], cbp[1], cap[2], cbp[2], type="L")
OR.v2 <- OR.values(phi, cys[2], cns[2], cys[3], cns[3], cap[2], cbp[2], cap[3], cbp[3], type="R")
# message(paste('OR.v1,OR.v2: ',OR.v1,OR.v2))
v1 <- OR.v1 > gam1
v2 <- OR.v2 > gam2
if (v1 & !v2){
return(1)
}else if (!v1 & v2){
return(3)
}else{
return(2)
}
}
}
}
make.decision.2dCFO.fn <- function(cidx.A, cidx.B, phi, cys, cns, cap, cbp, cover.doses, diag=FALSE){
cidx.A <- 0
cidx.B <- 0
# horizontal direction
# message(paste('cys[2,]: ', cys[2,]))
# message(paste('cns[2,]: ', cns[2,]))
idx.chg.A <- make.decision.1dCFO.fn(phi, cys[2,], cns[2,], cap[2,], cbp[2,], cover.doses[2,]) - 2
# message(paste('decision A: ',idx.chg.A))
# vertical direction
# message(paste('cys[,2]: ', cys[,2]))
# message(paste('cns[,2]: ', cns[,2]))
# message(paste('alp, bet: ', alp.prior, bet.prior))
# message(paste('cover.doses: ',cover.doses[,2]))
idx.chg.B <- make.decision.1dCFO.fn(phi, cys[,2], cns[,2], cap[,2], cbp[,2], cover.doses[,2]) - 2
# message(paste('decision B: ',idx.chg.B))
if (idx.chg.A == 1 & idx.chg.B == 1){
### horizontal and vertical only
message('E,E')
message('R: ')
OR.R <- OR.values(phi, cys[2,2], cns[2,2], cys[2,3], cns[2,3], cap[2,2], cbp[2,2], cap[2,3], cbp[2,3], type="R")
message('U: ')
OR.U <- OR.values(phi, cys[2,2], cns[2,2], cys[3,2], cns[3,2], cap[2,2], cbp[2,2], cap[3,2], cbp[3,2], type="R")
message(paste('OR.R: ',OR.R))
message(paste('OR.U: ',OR.U))
if (OR.R == OR.U){
rand <- rbinom(1,1,0.5)
if(rand == 0){
cidx.A <- 1
} else {
cidx.B <- 1
}
} else if (OR.R > OR.U){
cidx.B <- 1
} else {
cidx.A <- 1
}
### diagonal direction
# cidx.A <- idx.chg.A
# cidx.B <- idx.chg.B
} else if (idx.chg.A == -1 & idx.chg.B == -1){
if (is.na(cys[2,1]) & is.na(cys[1,2])){
cidx.A <- 0
cidx.B <- 0
} else if (is.na(cys[2,1])){
cidx.A <- -1
} else if (is.na(cys[1,2])){
cidx.B <- -1
} else {
OR.L <- OR.values(phi, cys[2,2], cns[2,2], cys[2,1], cns[2,1], cap[2,2], cbp[2,2], cap[2,1], cbp[2,1], type="L")
OR.D <- OR.values(phi, cys[2,2], cns[2,2], cys[1,2], cns[1,2], cap[2,2], cbp[2,2], cap[1,2], cbp[1,2], type="L")
message('D,D')
message(paste('OR.L: ',OR.L))
message(paste('OR.D: ',OR.D))
if (OR.L == OR.D){
rand <- rbinom(1,1,0.5)
if(rand == 0){
cidx.A <- -1
} else {
cidx.B <- -1
}
} else if (OR.L > OR.D){
cidx.B <- -1
} else {
cidx.A <- -1
}
}
} else if (idx.chg.A == 1 & idx.chg.B == -1){
# message('rare case occurs')
DCR <- make.decision.1dCFO.fn(phi, c(cys[1,2],cys[2,2],cys[2,3]), c(cns[1,2],cns[2,2],cns[2,3]), c(cap[1,2],cap[2,2],cap[2,3]),
c(cbp[1,2],cbp[2,2],cbp[2,3]), c(cover.doses[1,2],cover.doses[2,2],cover.doses[2,3])) - 2
if (DCR == 1){
cidx.B <- 1
} else if (DCR == -1){
cidx.A <- -1
}
} else if (idx.chg.A == -1 & idx.chg.B == 1){
# message('rare case occurs')
LCU <- make.decision.1dCFO.fn(phi, c(cys[2,1],cys[2,2],cys[3,2]), c(cns[2,1],cns[2,2],cns[3,2]), c(cap[2,1],cap[2,2],cap[3,2]),
c(cbp[2,1],cbp[2,2],cbp[3,2]), c(cover.doses[2,1],cover.doses[2,2],cover.doses[3,2])) - 2
if (LCU == 1){
cidx.A <- 1
} else if (LCU == -1){
cidx.B <- -1
}
} else if (idx.chg.A == 1 & idx.chg.B == 0){
cidx.B <- 1
} else if (idx.chg.A == 0 & idx.chg.B == 1){
cidx.A <- 1
} else if (idx.chg.A == -1 & idx.chg.B == 0){
cidx.B <- -1
} else if (idx.chg.A == 0 & idx.chg.B == -1){
cidx.A <- -1
}
return (c(cidx.A, cidx.B))
}
res <- CFO.simu.fn(target, p.true.3, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args, seed = 1)
res
library(pocrm)
install.packages("pocrm")
library(pocrm)
#All specifications refer to example in Wages, Conaway and O'Quigley (2011a).
#True toxicity rates of Scenario 1 in Table 4.
r<-c(0.06,0.08,0.10,0.15,0.10,0.12,0.30,0.45,0.15,0.30,0.50,0.60,0.50,0.55,0.60,0.70)
#Specifiy the possible orderings from Section 3.3.
orders<-matrix(nrow=3,ncol=16)
orders[1,]<-c(1,2,5,3,6,9,4,7,10,13,8,11,14,12,15,16)
orders[2,]<-c(1,5,2,3,6,9,13,10,7,4,8,11,14,15,12,16)
orders[3,]<-c(1,5,2,9,6,3,13,10,7,4,14,11,8,15,12,16)
#Specify the skeleton values.
skeleton<-getprior(0.05,0.30,8,16)
#Initial guesses of toxicity probabilities for each ordering.
alpha<-getwm(orders,skeleton)
#We consider all orders to be equally likely prior to the study.
prior.o<-rep(1/3,3)
#Initial escalation in Stage 1 proceeds according to the zones in Figure 1.
#Single patient cohorts are used.
x0<-c(rep(1,1),rep(2,1),rep(5,1),rep(3,1),rep(6,1),rep(9,1),rep(4,1),rep(7,1),rep(10,1),rep(13,1),
rep(8,1),rep(11,1),rep(14,1),rep(12,1),rep(15,1),rep(16,1))
#Number of patients used to define stopping rule
stop<-61
#Maximum sample size.
n<-60
#The target toxicity rate
theta<-0.30
#Number of simulations
nsim<-2
#Definition of acceptable DLT rates
tox.range<-0.05
fit<-pocrm.sim(r,alpha,prior.o,x0,stop,n,theta,nsim,tox.range)
fit
#Specify the possible orderings from Table 2
orders<-matrix(nrow=8,ncol=8)
orders[1,]<-c(1,2,3,4,5,6,7,8)
orders[2,]<-c(1,3,2,4,5,6,7,8)
orders[3,]<-c(1,2,3,5,4,6,7,8)
orders[4,]<-c(1,2,3,4,5,7,6,8)
orders[5,]<-c(1,3,2,5,4,6,7,8)
orders[6,]<-c(1,3,2,4,5,7,6,8)
orders[7,]<-c(1,2,3,5,4,7,6,8)
orders[8,]<-c(1,3,2,5,4,7,6,8)
#Specify the skeleton values provided in Table 4.
skeleton<-c(0.01,0.03,0.10,0.20,0.33,0.47,0.60,0.70)
#Initial guesses of toxicity probabilities for each ordering.
alpha<-getwm(orders,skeleton)
#We consider all orders to be equally likely prior to the study.
prior.o<-rep(1/8,8)
#The target toxicity rate
theta<-0.20
#Combinations tried on the first 11 patients in Table 5.
combos<-c(2,3,5,4,7,5,4,3,2,2,3)
#Toxicity outcomes on the first 11 patients in Table 5.
y<-c(0,0,0,0,1,1,1,0,0,1,1)
fit<-pocrm.imp(alpha,prior.o,theta,y,combos)
fit
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=seeds[i])
source("C:/Users/User/Desktop/2D-CFO/2D_CFO_prior.R", echo=TRUE)
source("2D_CFO_prior.R")
library(parallel)
target <- 0.30
ncohort <- 20
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
n.cores <- detectCores()
prior_a1 = c(0.1, 0.2, 0.3)
prior_a2 = c(0.1, 0.2, 0.3, 0.4, 0.5)
prior_tox_a1 = c(0.2, 0.3, 0.4)
prior_tox_a2 = c(0.12, 0.2, 0.3, 0.4, 0.5)
seeds <- 1:5000
add.args <- list(alp.prior=target, bet.prior=1-target)
p.trues.1 <- list()
p.trues.1[[1]] <- c(0.05, 0.10, 0.15, 0.30, 0.45)
p.trues.1[[2]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.trues.1[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.1 <- rbind(p.trues.1[[1]],p.trues.1[[2]],p.trues.1[[3]])
p.trues.2 <- list()
p.trues.2[[1]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.trues.2[[2]] <- c(0.30, 0.45, 0.50, 0.60, 0.75)
p.trues.2[[3]] <- c(0.45, 0.55, 0.60, 0.70, 0.80)
p.true.2 <- rbind(p.trues.2[[1]],p.trues.2[[2]],p.trues.2[[3]])
p.trues.3 <- list()
p.trues.3[[1]] <- c(0.02, 0.07, 0.10, 0.15, 0.30)
p.trues.3[[2]] <- c(0.07, 0.10, 0.15, 0.30, 0.45)
p.trues.3[[3]] <- c(0.10, 0.15, 0.30, 0.45, 0.55)
p.true.3 <- rbind(p.trues.3[[1]],p.trues.3[[2]],p.trues.3[[3]])
p.trues.4 <- list()
p.trues.4[[1]] <- c(0.30, 0.45, 0.60, 0.70, 0.80)
p.trues.4[[2]] <- c(0.45, 0.55, 0.65, 0.75, 0.85)
p.trues.4[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.4 <- rbind(p.trues.4[[1]],p.trues.4[[2]],p.trues.4[[3]])
p.trues.5 <- list()
p.trues.5[[1]] <- c(0.01, 0.02, 0.08, 0.10, 0.11)
p.trues.5[[2]] <- c(0.03, 0.05, 0.10, 0.13, 0.15)
p.trues.5[[3]] <- c(0.07, 0.09, 0.12, 0.15, 0.30)
p.true.5 <- rbind(p.trues.5[[1]],p.trues.5[[2]],p.trues.5[[3]])
p.trues.6 <- list()
p.trues.6[[1]] <- c(0.05, 0.08, 0.10, 0.13, 0.15)
p.trues.6[[2]] <- c(0.09, 0.12, 0.15, 0.30, 0.45)
p.trues.6[[3]] <- c(0.15, 0.30, 0.45, 0.50, 0.60)
p.true.6 <- rbind(p.trues.6[[1]],p.trues.6[[2]],p.trues.6[[3]])
p.trues.7 <- list()
p.trues.7[[1]] <- c(0.07, 0.10, 0.12, 0.15, 0.30)
p.trues.7[[2]] <- c(0.15, 0.30, 0.45, 0.52, 0.60)
p.trues.7[[3]] <- c(0.30, 0.50, 0.60, 0.65, 0.75)
p.true.7 <- rbind(p.trues.7[[1]],p.trues.7[[2]],p.trues.7[[3]])
p.trues.8 <- list()
p.trues.8[[1]] <- c(0.02, 0.10, 0.15, 0.50, 0.60)
p.trues.8[[2]] <- c(0.05, 0.12, 0.30, 0.55, 0.70)
p.trues.8[[3]] <- c(0.08, 0.15, 0.45, 0.60, 0.80)
p.true.8 <- rbind(p.trues.8[[1]],p.trues.8[[2]],p.trues.8[[3]])
p.trues.9 <- list()
p.trues.9[[1]] <- c(0.10, 0.12, 0.30, 0.40, 0.45)
p.trues.9[[2]] <- c(0.15, 0.30, 0.37, 0.43, 0.48)
p.trues.9[[3]] <- c(0.30, 0.37, 0.42, 0.47, 0.52)
p.true.9 <- rbind(p.trues.9[[1]],p.trues.9[[2]],p.trues.9[[3]])
p.trues.10 <- list()
p.trues.10[[1]] <- c(0.01, 0.03, 0.06, 0.08, 0.10)
p.trues.10[[2]] <- c(0.04, 0.07, 0.12, 0.16, 0.30)
p.trues.10[[3]] <- c(0.08, 0.10, 0.15, 0.30, 0.50)
p.true.10 <- rbind(p.trues.10[[1]],p.trues.10[[2]],p.trues.10[[3]])
p.trues.11 <- list()
p.trues.11[[1]] <- c(0.06, 0.10, 0.15, 0.30, 0.50)
p.trues.11[[2]] <- c(0.10, 0.30, 0.50, 0.70, 0.80)
p.trues.11[[3]] <- c(0.50, 0.60, 0.70, 0.80, 0.90)
p.true.11 <- rbind(p.trues.11[[1]],p.trues.11[[2]],p.trues.11[[3]])
p.trues.12 <- list()
p.trues.12[[1]] <- c(0.05, 0.12, 0.20, 0.30, 0.40)
p.trues.12[[2]] <- c(0.10, 0.20, 0.30, 0.40, 0.50)
p.trues.12[[3]] <- c(0.30, 0.42, 0.52, 0.62, 0.70)
p.true.12 <- rbind(p.trues.12[[1]],p.trues.12[[2]],p.trues.12[[3]])
p.trues.13 <- list()
p.trues.13[[1]] <- c(0.12, 0.20, 0.30, 0.40, 0.60)
p.trues.13[[2]] <- c(0.20, 0.30, 0.40, 0.50, 0.67)
p.trues.13[[3]] <- c(0.42, 0.52, 0.62, 0.70, 0.80)
p.true.13 <- rbind(p.trues.13[[1]],p.trues.13[[2]],p.trues.13[[3]])
p.trues.14 <- list()
p.trues.14[[1]] <- c(0.04, 0.06, 0.08, 0.20, 0.30)
p.trues.14[[2]] <- c(0.10, 0.20, 0.30, 0.50, 0.67)
p.trues.14[[3]] <- c(0.30, 0.42, 0.52, 0.70, 0.80)
p.true.14 <- rbind(p.trues.14[[1]],p.trues.14[[2]],p.trues.14[[3]])
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=seeds[i])
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=1)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=2)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=3)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=4)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=5)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=6)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=7)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=8)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=9)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=10)
res
res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=11)
res
# res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
#                              prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
#                             nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=11)
res <- CombIncrease_sim(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=1)
res
# res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
#                              prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
#                             nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=11)
res <- CombIncrease_sim(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=2)
res
dfcomb.simu.fn = function(ndose_a1, ndose_a2, p_tox, target, target_min, target_max, prior_tox_a1, prior_tox_a2, n_cohort,
cohort, tite=FALSE, time_full=0, poisson_rate=0, nsim, c_e=0.85, c_d=0.45, c_stop=0.95, c_t=0.5,
c_over=0.25, cmin_overunder=2, cmin_mtd=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1,
nburn=2000, niter=5000, seed=NULL){
res <- CombIncrease_sim(ndose_a1, ndose_a2, p_tox, target, target_min, target_max, prior_tox_a1, prior_tox_a2, n_cohort,
cohort, tite, time_full, poisson_rate, nsim, c_e, c_d, c_stop, c_t,
c_over, cmin_overunder, cmin_mtd, cmin_recom, startup, alloc_rule, early_stop,
nburn, niter, seed=seed)
MTD <- which(res$rec_dose == 100, arr.ind = T)
correct <- 0
if(p_tox[MTD[1],MTD[2]]==target){
correct <- 1
}
npercent <- 0
for (j in 1:ndose_a1) {
for (k in 1:ndose_a2) {
if (p_tox[j,k]==target){
npercent <- npercent + res$n_pat_dose[j,k]
}
}
}
npercent <- percent(npercent/(ncohort*cohort))
list(correct=correct, npercent=npercent, ntox=sum(res$n_tox_dose))
}
dfcomb.simu.fn = function(ndose_a1, ndose_a2, p_tox, target, target_min, target_max, prior_tox_a1, prior_tox_a2, n_cohort,
cohort, tite=FALSE, time_full=0, poisson_rate=0, nsim, c_e=0.85, c_d=0.45, c_stop=0.95, c_t=0.5,
c_over=0.25, cmin_overunder=2, cmin_mtd=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1,
nburn=2000, niter=5000, seed=1){
res <- CombIncrease_sim(ndose_a1, ndose_a2, p_tox, target, target_min, target_max, prior_tox_a1, prior_tox_a2, n_cohort,
cohort, tite, time_full, poisson_rate, nsim, c_e, c_d, c_stop, c_t,
c_over, cmin_overunder, cmin_mtd, cmin_recom, startup, alloc_rule, early_stop,
nburn, niter, seed=seed)
MTD <- which(res$rec_dose == 100, arr.ind = T)
correct <- 0
if(p_tox[MTD[1],MTD[2]]==target){
correct <- 1
}
npercent <- 0
for (j in 1:ndose_a1) {
for (k in 1:ndose_a2) {
if (p_tox[j,k]==target){
npercent <- npercent + res$n_pat_dose[j,k]
}
}
}
npercent <- percent(npercent/(ncohort*cohort))
list(correct=correct, npercent=npercent, ntox=sum(res$n_tox_dose))
}
# res.dfcomb <- dfcomb.simu.fn(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
#                              prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
#                             nsim=1, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=11)
res <- CombIncrease_sim(ndose_a1=3, ndose_a2=5, p_tox=p.true.2, target=0.30, target_min=0.20, target_max=0.40,
prior_tox_a1=prior_tox_a1, prior_tox_a2=prior_tox_a2, n_cohort=20, cohort=3, tite=FALSE,
nsim=5000, c_over=1, cmin_overunder=3, cmin_recom=1, startup=1, alloc_rule=1, early_stop=1, seed=2)
