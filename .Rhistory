for (i in 1:(n.tol-1)){
err1 <- sum(sort.ys.table.H1[1:i])
err2 <- sum(sort.ys.table.H0[(i+1):n.tol])
err <- err1 + err2
errs[i] <- err
}
min.err <- min(errs)
if (min.err > 1){
gam <- 0
min.err <- 1
}else {
minidx <- which.min(errs)
gam <- sort.OR.table[minidx]
}
}
list(gamma=gam, min.err=min.err)
}
make.decision.1dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
if (cover.doses[2] == 1){
return(1)
}else{
if (is.na(cys[1]) & (cover.doses[3]==1)){
return(2)
}else  if (is.na(cys[1]) & (!(cover.doses[3]==1))){
gam2 <- optim.gamma.fn(cns[2], cns[3], phi, "R", alp.prior, bet.prior)$gamma
OR.v2 <- OR.values(phi, cys[2], cns[2], cys[3], cns[3], alp.prior, bet.prior, type="R")
if (OR.v2>gam2){
return(3)
}else{
return(2)
}
}else  if (is.na(cys[3]) | (cover.doses[3]==1)){
gam1 <- optim.gamma.fn(cns[1], cns[2], phi, "L", alp.prior, bet.prior)$gamma
OR.v1 <- OR.values(phi, cys[1], cns[1], cys[2], cns[2], alp.prior, bet.prior, type="L")
if (OR.v1>gam1){
return(1)
}else{
return(2)
}
}else  if (!(is.na(cys[1]) | is.na(cys[3]) | cover.doses[3]==1)){
gam1 <- optim.gamma.fn(cns[1], cns[2], phi, "L", alp.prior, bet.prior)$gamma
gam2 <- optim.gamma.fn(cns[2], cns[3], phi, "R", alp.prior, bet.prior)$gamma
OR.v1 <- OR.values(phi, cys[1], cns[1], cys[2], cns[2], alp.prior, bet.prior, type="L")
OR.v2 <- OR.values(phi, cys[2], cns[2], cys[3], cns[3], alp.prior, bet.prior, type="R")
v1 <- OR.v1 > gam1
v2 <- OR.v2 > gam2
if (v1 & !v2){
return(1)
}else if (!v1 & v2){
return(3)
}else{
return(2)
}
}
}
}
make.decision.2dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
cidx.A <- 0
cidx.B <- 0
idx.chg.A <- make.decision.1dCFO.fn(phi, cys[2,], cns[2,], alp.prior, bet.prior, cover.doses[2,]) - 2
idx.chg.B <- make.decision.1dCFO.fn(phi, cys[,2], cns[,2], alp.prior, bet.prior, cover.doses[,2]) - 2
if (idx.chg.A == 1 & idx.chg.B == 1){
### horizontal and vertical only
# OR.R <- OR.values(phi, cys[2,2], cns[2,2], cys[2,3], cns[2,3], alp.prior, bet.prior, type="R")
# OR.U <- OR.values(phi, cys[2,2], cns[2,2], cys[3,2], cns[3,2], alp.prior, bet.prior, type="R")
# if (OR.R > OR.U){
#   cidx.A <- idx.chg.A + cidx.A
# } else {
#   cidx.B <- idx.chg.B + cidx.B
# }
### diagonal direction
cidx.A <- idx.chg.A + 1
cidx.B <- idx.chg.B + 1
} else if (idx.chg.A == -1 & idx.chg.B == -1){
OR.L <- OR.values(phi, cys[2,2], cns[2,2], cys[2,1], cns[2,1], alp.prior, bet.prior, type="L")
OR.D <- OR.values(phi, cys[2,2], cns[2,2], cys[1,2], cns[1,2], alp.prior, bet.prior, type="L")
if (OR.L > OR.D){
cidx.A <- idx.chg.A + cidx.A
} else {
cidx.B <- idx.chg.B + cidx.B
}
} else if (idx.chg.A == 1 & idx.chg.B == -1){
DCR <- make.decision.1dCFO.fn(phi, c(cys[1,2],cys[2,2],cys[2,3]), c(cns[1,2],cns[2,2],cns[2,3]), alp.prior,
bet.prior, c(cover.doses[1,2],cover.doses[2,2],cover.doses[2,3])) - 2
if (DCR == 1){
cidx.A <- idx.chg.A + cidx.A
} else if (DCR == -1){
cidx.B <- idx.chg.B + cidx.B
}
} else if (idx.chg.A == -1 & idx.chg.B == 1){
LCU <- make.decision.1dCFO.fn(phi, c(cys[2,1],cys[2,2],cys[3,2]), c(cns[2,1],cns[2,2],cns[3,2]), alp.prior,
bet.prior, c(cover.doses[2,1],cover.doses[2,2],cover.doses[3,2])) - 2
if (LCU == 1){
cidx.B <- idx.chg.B + cidx.B
} else if (DCR == -1){
cidx.A <- idx.chg.A + cidx.A
}
} else {
cidx.A <- idx.chg.A + cidx.A
cidx.B <- idx.chg.B + cidx.B
}
return (c(cidx.A, cidx.B))
}
overdose.fn <- function(phi, add.args=list()){
y <- add.args$y
n <- add.args$n
alp.prior <- add.args$alp.prior
bet.prior <- add.args$bet.prior
pp <- post.prob.fn(phi, y, n, alp.prior, bet.prior)
if ((pp >= 0.95) & (add.args$n>=3)){
return(TRUE)
}else{
return(FALSE)
}
}
# Simulation function for CFO
CFO.simu.fn <- function(phi, p.true, ncohort=12, init.level.A=1, init.level.B=1,
cohortsize=1, add.args=list()){
# phi: Target DIL rate
# p.true: True DIL rates under the different dose levels
# ncohort: The number of cohorts
# cohortsize: The sample size in each cohort
# alp.prior, bet.prior: prior parameters
earlystop <- 0
ndose.A <- length(p.true[,1])
ndose.B <- length(p.true[1,])
cidx.A <- init.level.A
cidx.B <- init.level.B
tys <- matrix(0, ndose.A, ndose.B) # number of responses for different doses.
tns <- matrix(0, ndose.A, ndose.B) # number of subject for different doses.
tover.doses <- matrix(0, ndose.A, ndose.B) # Whether each dose is overdosed or not, 1 yes
for (i in 1:ncohort){
pc <- p.true[cidx.A, cidx.B]
# sample from current dose
cres <- rbinom(cohortsize, 1, pc)
# update results
tys[cidx.A, cidx.B] <- tys[cidx.A, cidx.B] + sum(cres)
tns[cidx.A, cidx.B] <- tns[cidx.A, cidx.B] + cohortsize
cy <- tys[cidx.A, cidx.B]
cn <- tns[cidx.A, cidx.B]
add.args <- c(list(y=cy, n=cn, tys=tys, tns=tns, cidx.A=cidx.A, cidx.B=cidx.B), add.args)
if (overdose.fn(phi, add.args)){
tover.doses[cidx.A:ndose.A, cidx.B:ndose.B] <- 1
}
if (tover.doses[1,1] == 1){
earlystop <- 1
break()
}
if (cidx.A!=1 & cidx.B!=1 & cidx.A!=ndose.A & cidx.B!=ndose.B){
# no boundary
cys <- tys[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cns <- tns[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
cover.doses <- tover.doses[(cidx.A-1):(cidx.A+1), (cidx.B-1):(cidx.B+1)]
} else if (cidx.A==1 & cidx.B==1){
# (1, 1)
cys <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tys[1:2,1:2]))
cns <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tns[1:2,1:2]))
cover.doses <- rbind(c(NA,NA,NA),cbind(c(NA,NA),tover.doses[1:2,1:2]))
} else if (cidx.A==ndose.A & cidx.B==ndose.B){
# (nA, nB)
cys <- rbind(cbind(tys[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cns <- rbind(cbind(tns[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
cover.doses <- rbind(cbind(tover.doses[(cidx.A-1):cidx.A,(cidx.B-1):cidx.B],c(NA,NA)), c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B==ndose.B){
# (1, nB)
cys <- rbind(c(NA,NA,NA),cbind(tys[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cns <- rbind(c(NA,NA,NA),cbind(tns[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
cover.doses <- rbind(c(NA,NA,NA),cbind(tover.doses[1:2,(cidx.B-1):cidx.B],c(NA,NA)))
} else if (cidx.A==ndose.A & cidx.B==1){
# (nA, 1)
cys <- rbind(cbind(c(NA,NA), tys[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cns <- rbind(cbind(c(NA,NA), tns[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
cover.doses <- rbind(cbind(c(NA,NA), tover.doses[(cidx.A-1):cidx.A,1:2]),c(NA,NA,NA))
} else if (cidx.A==1 & cidx.B!=1){
# (1, 2:(nB-1))
cys <- rbind(c(NA,NA,NA), tys[1:2, (cidx.B-1):(cidx.B+1)])
cns <- rbind(c(NA,NA,NA), tns[1:2, (cidx.B-1):(cidx.B+1)])
cover.doses <- rbind(c(NA,NA,NA), tover.doses[1:2, (cidx.B-1):(cidx.B+1)])
} else if (cidx.A!=1 & cidx.B==1){
# (2:(nA-1), 1)
cys <- cbind(c(NA,NA,NA), tys[(cidx.A-1):(cidx.A+1), 1:2])
cns <- cbind(c(NA,NA,NA), tns[(cidx.A-1):(cidx.A+1), 1:2])
cover.doses <- cbind(c(NA,NA,NA), tover.doses[(cidx.A-1):(cidx.A+1), 1:2])
}
###############
idx.chg <- make.decision.2dCFO.fn(phi, cys, cns, add.args$alp.prior, add.args$bet.prior, cover.doses)
cidx.A <- cidx.A + idx.chg[1]
cidx.B <- cidx.B + idx.chg[2]
if (cidx.A > ndose.A){
cidx.A <- cidx.A - 1
}
if (cidx.B > ndose.B){
cidx.B <- cidx.B - 1
}
###########
}
if (earlystop==0){
MTD <- select.mtd.comb(phi, tns, tys)$MTD
}else{
MTD <- c(99,99)
}
list(MTD=MTD, dose.ns=tns, DLT.ns=tys, p.true=p.true, target=phi, over.doses=tover.doses)
}
source("2D_CFO_MTD.R")
target <- 0.33
ncohort <- 10
cohortsize <- 3
init.level.A <- 1
init.level.B <- 1
add.args <- list(alp.prior=target, bet.prior=1-target)
p.trues <- list()
p.trues[[1]] <- c(0.45, 0.52, 0.62, 0.70, 0.80)
p.trues[[2]] <- c(0.30, 0.40, 0.52, 0.60, 0.70)
p.trues[[3]] <- c(0.12, 0.20, 0.33, 0.40, 0.50)
p.trues[[4]] <- c(0.01, 0.06, 0.13, 0.23, 0.50)
p.trues[[5]] <- c(0.00, 0.02, 0.05, 0.10, 0.45)
p.true <- rbind(p.trues[[5]],p.trues[[4]],p.trues[[3]],p.trues[[2]],p.trues[[1]])
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
make.decision.2dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
cidx.A <- 0
cidx.B <- 0
idx.chg.A <- make.decision.1dCFO.fn(phi, cys[2,], cns[2,], alp.prior, bet.prior, cover.doses[2,]) - 2
idx.chg.B <- make.decision.1dCFO.fn(phi, cys[,2], cns[,2], alp.prior, bet.prior, cover.doses[,2]) - 2
if (idx.chg.A == 1 & idx.chg.B == 1){
### horizontal and vertical only
# OR.R <- OR.values(phi, cys[2,2], cns[2,2], cys[2,3], cns[2,3], alp.prior, bet.prior, type="R")
# OR.U <- OR.values(phi, cys[2,2], cns[2,2], cys[3,2], cns[3,2], alp.prior, bet.prior, type="R")
# if (OR.R > OR.U){
#   cidx.A <- idx.chg.A + cidx.A
# } else {
#   cidx.B <- idx.chg.B + cidx.B
# }
### diagonal direction
cidx.A <- idx.chg.A
cidx.B <- idx.chg.B
} else if (idx.chg.A == -1 & idx.chg.B == -1){
OR.L <- OR.values(phi, cys[2,2], cns[2,2], cys[2,1], cns[2,1], alp.prior, bet.prior, type="L")
OR.D <- OR.values(phi, cys[2,2], cns[2,2], cys[1,2], cns[1,2], alp.prior, bet.prior, type="L")
if (OR.L > OR.D){
cidx.A <- idx.chg.A
} else {
cidx.B <- idx.chg.B
}
} else if (idx.chg.A == 1 & idx.chg.B == -1){
DCR <- make.decision.1dCFO.fn(phi, c(cys[1,2],cys[2,2],cys[2,3]), c(cns[1,2],cns[2,2],cns[2,3]), alp.prior,
bet.prior, c(cover.doses[1,2],cover.doses[2,2],cover.doses[2,3])) - 2
if (DCR == 1){
cidx.A <- idx.chg.A
} else if (DCR == -1){
cidx.B <- idx.chg.B
}
} else if (idx.chg.A == -1 & idx.chg.B == 1){
LCU <- make.decision.1dCFO.fn(phi, c(cys[2,1],cys[2,2],cys[3,2]), c(cns[2,1],cns[2,2],cns[3,2]), alp.prior,
bet.prior, c(cover.doses[2,1],cover.doses[2,2],cover.doses[3,2])) - 2
if (LCU == 1){
cidx.B <- idx.chg.B
} else if (DCR == -1){
cidx.A <- idx.chg.A
}
} else {
cidx.A <- idx.chg.A
cidx.B <- idx.chg.B
}
return (c(cidx.A, cidx.B))
}
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
make.decision.2dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
cidx.A <- 0
cidx.B <- 0
idx.chg.A <- make.decision.1dCFO.fn(phi, cys[2,], cns[2,], alp.prior, bet.prior, cover.doses[2,]) - 2
idx.chg.B <- make.decision.1dCFO.fn(phi, cys[,2], cns[,2], alp.prior, bet.prior, cover.doses[,2]) - 2
if (idx.chg.A == 1 & idx.chg.B == 1){
### horizontal and vertical only
OR.R <- OR.values(phi, cys[2,2], cns[2,2], cys[2,3], cns[2,3], alp.prior, bet.prior, type="R")
OR.U <- OR.values(phi, cys[2,2], cns[2,2], cys[3,2], cns[3,2], alp.prior, bet.prior, type="R")
if (OR.R > OR.U){
cidx.A <- idx.chg.A
} else {
cidx.B <- idx.chg.B
}
### diagonal direction
# cidx.A <- idx.chg.A
# cidx.B <- idx.chg.B
} else if (idx.chg.A == -1 & idx.chg.B == -1){
OR.L <- OR.values(phi, cys[2,2], cns[2,2], cys[2,1], cns[2,1], alp.prior, bet.prior, type="L")
OR.D <- OR.values(phi, cys[2,2], cns[2,2], cys[1,2], cns[1,2], alp.prior, bet.prior, type="L")
if (OR.L > OR.D){
cidx.A <- idx.chg.A
} else {
cidx.B <- idx.chg.B
}
} else if (idx.chg.A == 1 & idx.chg.B == -1){
DCR <- make.decision.1dCFO.fn(phi, c(cys[1,2],cys[2,2],cys[2,3]), c(cns[1,2],cns[2,2],cns[2,3]), alp.prior,
bet.prior, c(cover.doses[1,2],cover.doses[2,2],cover.doses[2,3])) - 2
if (DCR == 1){
cidx.A <- idx.chg.A
} else if (DCR == -1){
cidx.B <- idx.chg.B
}
} else if (idx.chg.A == -1 & idx.chg.B == 1){
LCU <- make.decision.1dCFO.fn(phi, c(cys[2,1],cys[2,2],cys[3,2]), c(cns[2,1],cns[2,2],cns[3,2]), alp.prior,
bet.prior, c(cover.doses[2,1],cover.doses[2,2],cover.doses[3,2])) - 2
if (LCU == 1){
cidx.B <- idx.chg.B
} else if (DCR == -1){
cidx.A <- idx.chg.A
}
} else {
cidx.A <- idx.chg.A
cidx.B <- idx.chg.B
}
return (c(cidx.A, cidx.B))
}
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
make.decision.2dCFO.fn <- function(phi, cys, cns, alp.prior, bet.prior, cover.doses, diag=FALSE){
cidx.A <- 0
cidx.B <- 0
idx.chg.A <- make.decision.1dCFO.fn(phi, cys[2,], cns[2,], alp.prior, bet.prior, cover.doses[2,]) - 2
idx.chg.B <- make.decision.1dCFO.fn(phi, cys[,2], cns[,2], alp.prior, bet.prior, cover.doses[,2]) - 2
if (idx.chg.A == 1 & idx.chg.B == 1){
### horizontal and vertical only
# OR.R <- OR.values(phi, cys[2,2], cns[2,2], cys[2,3], cns[2,3], alp.prior, bet.prior, type="R")
# OR.U <- OR.values(phi, cys[2,2], cns[2,2], cys[3,2], cns[3,2], alp.prior, bet.prior, type="R")
# if (OR.R > OR.U){
#   cidx.A <- idx.chg.A
# } else {
#   cidx.B <- idx.chg.B
# }
### diagonal direction
cidx.A <- idx.chg.A
cidx.B <- idx.chg.B
} else if (idx.chg.A == -1 & idx.chg.B == -1){
OR.L <- OR.values(phi, cys[2,2], cns[2,2], cys[2,1], cns[2,1], alp.prior, bet.prior, type="L")
OR.D <- OR.values(phi, cys[2,2], cns[2,2], cys[1,2], cns[1,2], alp.prior, bet.prior, type="L")
if (OR.L > OR.D){
cidx.A <- idx.chg.A
} else {
cidx.B <- idx.chg.B
}
} else if (idx.chg.A == 1 & idx.chg.B == -1){
DCR <- make.decision.1dCFO.fn(phi, c(cys[1,2],cys[2,2],cys[2,3]), c(cns[1,2],cns[2,2],cns[2,3]), alp.prior,
bet.prior, c(cover.doses[1,2],cover.doses[2,2],cover.doses[2,3])) - 2
if (DCR == 1){
cidx.A <- idx.chg.A
} else if (DCR == -1){
cidx.B <- idx.chg.B
}
} else if (idx.chg.A == -1 & idx.chg.B == 1){
LCU <- make.decision.1dCFO.fn(phi, c(cys[2,1],cys[2,2],cys[3,2]), c(cns[2,1],cns[2,2],cns[3,2]), alp.prior,
bet.prior, c(cover.doses[2,1],cover.doses[2,2],cover.doses[3,2])) - 2
if (LCU == 1){
cidx.B <- idx.chg.B
} else if (DCR == -1){
cidx.A <- idx.chg.A
}
} else {
cidx.A <- idx.chg.A
cidx.B <- idx.chg.B
}
return (c(cidx.A, cidx.B))
}
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
res <- CFO.simu.fn(target, p.true, ncohort=ncohort, cohortsize=cohortsize, init.level.A, init.level.B, add.args=add.args)
res
